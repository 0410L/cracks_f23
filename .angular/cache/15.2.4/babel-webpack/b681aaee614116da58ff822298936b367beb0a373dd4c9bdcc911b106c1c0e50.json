{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\nclass TranslateLoader {}\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\nclass TranslateFakeLoader extends TranslateLoader {\n  getTranslation(lang) {\n    return of({});\n  }\n}\nTranslateFakeLoader.ɵfac = /* @__PURE__ */function () {\n  let ɵTranslateFakeLoader_BaseFactory;\n  return function TranslateFakeLoader_Factory(t) {\n    return (ɵTranslateFakeLoader_BaseFactory || (ɵTranslateFakeLoader_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeLoader)))(t || TranslateFakeLoader);\n  };\n}();\nTranslateFakeLoader.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateFakeLoader,\n  factory: TranslateFakeLoader.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateFakeLoader, [{\n    type: Injectable\n  }], null, null);\n})();\nclass MissingTranslationHandler {}\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\nclass FakeMissingTranslationHandler {\n  handle(params) {\n    return params.key;\n  }\n}\nFakeMissingTranslationHandler.ɵfac = function FakeMissingTranslationHandler_Factory(t) {\n  return new (t || FakeMissingTranslationHandler)();\n};\nFakeMissingTranslationHandler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: FakeMissingTranslationHandler,\n  factory: FakeMissingTranslationHandler.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(FakeMissingTranslationHandler, [{\n    type: Injectable\n  }], null, null);\n})();\n\n/* tslint:disable */\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\nfunction equals(o1, o2) {\n  if (o1 === o2) return true;\n  if (o1 === null || o2 === null) return false;\n  if (o1 !== o1 && o2 !== o2) return true; // NaN === NaN\n  let t1 = typeof o1,\n    t2 = typeof o2,\n    length,\n    key,\n    keySet;\n  if (t1 == t2 && t1 == 'object') {\n    if (Array.isArray(o1)) {\n      if (!Array.isArray(o2)) return false;\n      if ((length = o1.length) == o2.length) {\n        for (key = 0; key < length; key++) {\n          if (!equals(o1[key], o2[key])) return false;\n        }\n        return true;\n      }\n    } else {\n      if (Array.isArray(o2)) {\n        return false;\n      }\n      keySet = Object.create(null);\n      for (key in o1) {\n        if (!equals(o1[key], o2[key])) {\n          return false;\n        }\n        keySet[key] = true;\n      }\n      for (key in o2) {\n        if (!(key in keySet) && typeof o2[key] !== 'undefined') {\n          return false;\n        }\n      }\n      return true;\n    }\n  }\n  return false;\n}\n/* tslint:enable */\nfunction isDefined(value) {\n  return typeof value !== 'undefined' && value !== null;\n}\nfunction isObject(item) {\n  return item && typeof item === 'object' && !Array.isArray(item);\n}\nfunction mergeDeep(target, source) {\n  let output = Object.assign({}, target);\n  if (isObject(target) && isObject(source)) {\n    Object.keys(source).forEach(key => {\n      if (isObject(source[key])) {\n        if (!(key in target)) {\n          Object.assign(output, {\n            [key]: source[key]\n          });\n        } else {\n          output[key] = mergeDeep(target[key], source[key]);\n        }\n      } else {\n        Object.assign(output, {\n          [key]: source[key]\n        });\n      }\n    });\n  }\n  return output;\n}\nclass TranslateParser {}\nclass TranslateDefaultParser extends TranslateParser {\n  constructor() {\n    super(...arguments);\n    this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\n  }\n  interpolate(expr, params) {\n    let result;\n    if (typeof expr === 'string') {\n      result = this.interpolateString(expr, params);\n    } else if (typeof expr === 'function') {\n      result = this.interpolateFunction(expr, params);\n    } else {\n      // this should not happen, but an unrelated TranslateService test depends on it\n      result = expr;\n    }\n    return result;\n  }\n  getValue(target, key) {\n    let keys = typeof key === 'string' ? key.split('.') : [key];\n    key = '';\n    do {\n      key += keys.shift();\n      if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\n        target = target[key];\n        key = '';\n      } else if (!keys.length) {\n        target = undefined;\n      } else {\n        key += '.';\n      }\n    } while (keys.length);\n    return target;\n  }\n  interpolateFunction(fn, params) {\n    return fn(params);\n  }\n  interpolateString(expr, params) {\n    if (!params) {\n      return expr;\n    }\n    return expr.replace(this.templateMatcher, (substring, b) => {\n      let r = this.getValue(params, b);\n      return isDefined(r) ? r : substring;\n    });\n  }\n}\nTranslateDefaultParser.ɵfac = /* @__PURE__ */function () {\n  let ɵTranslateDefaultParser_BaseFactory;\n  return function TranslateDefaultParser_Factory(t) {\n    return (ɵTranslateDefaultParser_BaseFactory || (ɵTranslateDefaultParser_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateDefaultParser)))(t || TranslateDefaultParser);\n  };\n}();\nTranslateDefaultParser.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateDefaultParser,\n  factory: TranslateDefaultParser.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateDefaultParser, [{\n    type: Injectable\n  }], null, null);\n})();\nclass TranslateCompiler {}\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\nclass TranslateFakeCompiler extends TranslateCompiler {\n  compile(value, lang) {\n    return value;\n  }\n  compileTranslations(translations, lang) {\n    return translations;\n  }\n}\nTranslateFakeCompiler.ɵfac = /* @__PURE__ */function () {\n  let ɵTranslateFakeCompiler_BaseFactory;\n  return function TranslateFakeCompiler_Factory(t) {\n    return (ɵTranslateFakeCompiler_BaseFactory || (ɵTranslateFakeCompiler_BaseFactory = i0.ɵɵgetInheritedFactory(TranslateFakeCompiler)))(t || TranslateFakeCompiler);\n  };\n}();\nTranslateFakeCompiler.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateFakeCompiler,\n  factory: TranslateFakeCompiler.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateFakeCompiler, [{\n    type: Injectable\n  }], null, null);\n})();\nclass TranslateStore {\n  constructor() {\n    /**\r\n     * The lang currently used\r\n     */\n    this.currentLang = this.defaultLang;\n    /**\r\n     * a list of translations per lang\r\n     */\n    this.translations = {};\n    /**\r\n     * an array of langs\r\n     */\n    this.langs = [];\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n    this.onTranslationChange = new EventEmitter();\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n    this.onLangChange = new EventEmitter();\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\n    this.onDefaultLangChange = new EventEmitter();\n  }\n}\nconst USE_STORE = new InjectionToken('USE_STORE');\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\nclass TranslateService {\n  /**\r\n   *\r\n   * @param store an instance of the store (that is supposed to be unique)\r\n   * @param currentLoader An instance of the loader currently used\r\n   * @param compiler An instance of the compiler currently used\r\n   * @param parser An instance of the parser currently used\r\n   * @param missingTranslationHandler A handler for missing translations.\r\n   * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n   * @param isolate whether this service should use the store or not\r\n   * @param extend To make a child module extend (and use) translations from parent modules.\r\n   * @param defaultLanguage Set the default language using configuration\r\n   */\n  constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\n    this.store = store;\n    this.currentLoader = currentLoader;\n    this.compiler = compiler;\n    this.parser = parser;\n    this.missingTranslationHandler = missingTranslationHandler;\n    this.useDefaultLang = useDefaultLang;\n    this.isolate = isolate;\n    this.extend = extend;\n    this.pending = false;\n    this._onTranslationChange = new EventEmitter();\n    this._onLangChange = new EventEmitter();\n    this._onDefaultLangChange = new EventEmitter();\n    this._langs = [];\n    this._translations = {};\n    this._translationRequests = {};\n    /** set the default language from configuration */\n    if (defaultLanguage) {\n      this.setDefaultLang(defaultLanguage);\n    }\n  }\n  /**\r\n   * An EventEmitter to listen to translation change events\r\n   * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\n  get onTranslationChange() {\n    return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\n  }\n  /**\r\n   * An EventEmitter to listen to lang change events\r\n   * onLangChange.subscribe((params: LangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\n  get onLangChange() {\n    return this.isolate ? this._onLangChange : this.store.onLangChange;\n  }\n  /**\r\n   * An EventEmitter to listen to default lang change events\r\n   * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n     *     // do something\r\n     * });\r\n   */\n  get onDefaultLangChange() {\n    return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\n  }\n  /**\r\n   * The default lang to fallback when translations are missing on the current lang\r\n   */\n  get defaultLang() {\n    return this.isolate ? this._defaultLang : this.store.defaultLang;\n  }\n  set defaultLang(defaultLang) {\n    if (this.isolate) {\n      this._defaultLang = defaultLang;\n    } else {\n      this.store.defaultLang = defaultLang;\n    }\n  }\n  /**\r\n   * The lang currently used\r\n   */\n  get currentLang() {\n    return this.isolate ? this._currentLang : this.store.currentLang;\n  }\n  set currentLang(currentLang) {\n    if (this.isolate) {\n      this._currentLang = currentLang;\n    } else {\n      this.store.currentLang = currentLang;\n    }\n  }\n  /**\r\n   * an array of langs\r\n   */\n  get langs() {\n    return this.isolate ? this._langs : this.store.langs;\n  }\n  set langs(langs) {\n    if (this.isolate) {\n      this._langs = langs;\n    } else {\n      this.store.langs = langs;\n    }\n  }\n  /**\r\n   * a list of translations per lang\r\n   */\n  get translations() {\n    return this.isolate ? this._translations : this.store.translations;\n  }\n  set translations(translations) {\n    if (this.isolate) {\n      this._translations = translations;\n    } else {\n      this.store.translations = translations;\n    }\n  }\n  /**\r\n   * Sets the default language to use as a fallback\r\n   */\n  setDefaultLang(lang) {\n    if (lang === this.defaultLang) {\n      return;\n    }\n    let pending = this.retrieveTranslations(lang);\n    if (typeof pending !== \"undefined\") {\n      // on init set the defaultLang immediately\n      if (this.defaultLang == null) {\n        this.defaultLang = lang;\n      }\n      pending.pipe(take(1)).subscribe(res => {\n        this.changeDefaultLang(lang);\n      });\n    } else {\n      // we already have this language\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\r\n   * Gets the default language used\r\n   */\n  getDefaultLang() {\n    return this.defaultLang;\n  }\n  /**\r\n   * Changes the lang currently used\r\n   */\n  use(lang) {\n    // don't change the language if the language given is already selected\n    if (lang === this.currentLang) {\n      return of(this.translations[lang]);\n    }\n    let pending = this.retrieveTranslations(lang);\n    if (typeof pending !== \"undefined\") {\n      // on init set the currentLang immediately\n      if (!this.currentLang) {\n        this.currentLang = lang;\n      }\n      pending.pipe(take(1)).subscribe(res => {\n        this.changeLang(lang);\n      });\n      return pending;\n    } else {\n      // we have this language, return an Observable\n      this.changeLang(lang);\n      return of(this.translations[lang]);\n    }\n  }\n  /**\r\n   * Retrieves the given translations\r\n   */\n  retrieveTranslations(lang) {\n    let pending;\n    // if this language is unavailable or extend is true, ask for it\n    if (typeof this.translations[lang] === \"undefined\" || this.extend) {\n      this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\n      pending = this._translationRequests[lang];\n    }\n    return pending;\n  }\n  /**\r\n   * Gets an object of translations for a given language with the current loader\r\n   * and passes it through the compiler\r\n   */\n  getTranslation(lang) {\n    this.pending = true;\n    const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\n    this.loadingTranslations = loadingTranslations.pipe(map(res => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\n    this.loadingTranslations.subscribe({\n      next: res => {\n        this.translations[lang] = this.extend && this.translations[lang] ? {\n          ...res,\n          ...this.translations[lang]\n        } : res;\n        this.updateLangs();\n        this.pending = false;\n      },\n      error: err => {\n        this.pending = false;\n      }\n    });\n    return loadingTranslations;\n  }\n  /**\r\n   * Manually sets an object of translations for a given language\r\n   * after passing it through the compiler\r\n   */\n  setTranslation(lang, translations, shouldMerge = false) {\n    translations = this.compiler.compileTranslations(translations, lang);\n    if ((shouldMerge || this.extend) && this.translations[lang]) {\n      this.translations[lang] = mergeDeep(this.translations[lang], translations);\n    } else {\n      this.translations[lang] = translations;\n    }\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\r\n   * Returns an array of currently available langs\r\n   */\n  getLangs() {\n    return this.langs;\n  }\n  /**\r\n   * Add available langs\r\n   */\n  addLangs(langs) {\n    langs.forEach(lang => {\n      if (this.langs.indexOf(lang) === -1) {\n        this.langs.push(lang);\n      }\n    });\n  }\n  /**\r\n   * Update the list of available langs\r\n   */\n  updateLangs() {\n    this.addLangs(Object.keys(this.translations));\n  }\n  /**\r\n   * Returns the parsed result of the translations\r\n   */\n  getParsedResult(translations, key, interpolateParams) {\n    let res;\n    if (key instanceof Array) {\n      let result = {},\n        observables = false;\n      for (let k of key) {\n        result[k] = this.getParsedResult(translations, k, interpolateParams);\n        if (isObservable(result[k])) {\n          observables = true;\n        }\n      }\n      if (observables) {\n        const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\n        return forkJoin(sources).pipe(map(arr => {\n          let obj = {};\n          arr.forEach((value, index) => {\n            obj[key[index]] = value;\n          });\n          return obj;\n        }));\n      }\n      return result;\n    }\n    if (translations) {\n      res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\n    }\n    if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\n      res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\n    }\n    if (typeof res === \"undefined\") {\n      let params = {\n        key,\n        translateService: this\n      };\n      if (typeof interpolateParams !== 'undefined') {\n        params.interpolateParams = interpolateParams;\n      }\n      res = this.missingTranslationHandler.handle(params);\n    }\n    return typeof res !== \"undefined\" ? res : key;\n  }\n  /**\r\n   * Gets the translated value of a key (or an array of keys)\r\n   * @returns the translated key, or an object of translated keys\r\n   */\n  get(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    // check if we are loading a new translation to use\n    if (this.pending) {\n      return this.loadingTranslations.pipe(concatMap(res => {\n        res = this.getParsedResult(res, key, interpolateParams);\n        return isObservable(res) ? res : of(res);\n      }));\n    } else {\n      let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    }\n  }\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the translation changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\n  getStreamOnTranslationChange(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      if (typeof res.subscribe === 'function') {\n        return res;\n      } else {\n        return of(res);\n      }\n    })));\n  }\n  /**\r\n   * Returns a stream of translated values of a key (or an array of keys) which updates\r\n   * whenever the language changes.\r\n   * @returns A stream of the translated key, or an object of translated keys\r\n   */\n  stream(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap(event => {\n      const res = this.getParsedResult(event.translations, key, interpolateParams);\n      return isObservable(res) ? res : of(res);\n    })));\n  }\n  /**\r\n   * Returns a translation instantly from the internal state of loaded translation.\r\n   * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n   */\n  instant(key, interpolateParams) {\n    if (!isDefined(key) || !key.length) {\n      throw new Error(`Parameter \"key\" required`);\n    }\n    let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\n    if (isObservable(res)) {\n      if (key instanceof Array) {\n        let obj = {};\n        key.forEach((value, index) => {\n          obj[key[index]] = key[index];\n        });\n        return obj;\n      }\n      return key;\n    } else {\n      return res;\n    }\n  }\n  /**\r\n   * Sets the translated value of a key, after compiling it\r\n   */\n  set(key, value, lang = this.currentLang) {\n    this.translations[lang][key] = this.compiler.compile(value, lang);\n    this.updateLangs();\n    this.onTranslationChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\r\n   * Changes the current lang\r\n   */\n  changeLang(lang) {\n    this.currentLang = lang;\n    this.onLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n    // if there is no default lang, use the one that we just set\n    if (this.defaultLang == null) {\n      this.changeDefaultLang(lang);\n    }\n  }\n  /**\r\n   * Changes the default lang\r\n   */\n  changeDefaultLang(lang) {\n    this.defaultLang = lang;\n    this.onDefaultLangChange.emit({\n      lang: lang,\n      translations: this.translations[lang]\n    });\n  }\n  /**\r\n   * Allows to reload the lang file from the file\r\n   */\n  reloadLang(lang) {\n    this.resetLang(lang);\n    return this.getTranslation(lang);\n  }\n  /**\r\n   * Deletes inner translation\r\n   */\n  resetLang(lang) {\n    this._translationRequests[lang] = undefined;\n    this.translations[lang] = undefined;\n  }\n  /**\r\n   * Returns the language code name from the browser, e.g. \"de\"\r\n   */\n  getBrowserLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    if (typeof browserLang === 'undefined') {\n      return undefined;\n    }\n    if (browserLang.indexOf('-') !== -1) {\n      browserLang = browserLang.split('-')[0];\n    }\n    if (browserLang.indexOf('_') !== -1) {\n      browserLang = browserLang.split('_')[0];\n    }\n    return browserLang;\n  }\n  /**\r\n   * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n   */\n  getBrowserCultureLang() {\n    if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\n      return undefined;\n    }\n    let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\n    browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\n    return browserCultureLang;\n  }\n}\nTranslateService.ɵfac = function TranslateService_Factory(t) {\n  return new (t || TranslateService)(i0.ɵɵinject(TranslateStore), i0.ɵɵinject(TranslateLoader), i0.ɵɵinject(TranslateCompiler), i0.ɵɵinject(TranslateParser), i0.ɵɵinject(MissingTranslationHandler), i0.ɵɵinject(USE_DEFAULT_LANG), i0.ɵɵinject(USE_STORE), i0.ɵɵinject(USE_EXTEND), i0.ɵɵinject(DEFAULT_LANGUAGE));\n};\nTranslateService.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslateService,\n  factory: TranslateService.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateService, [{\n    type: Injectable\n  }], function () {\n    return [{\n      type: TranslateStore\n    }, {\n      type: TranslateLoader\n    }, {\n      type: TranslateCompiler\n    }, {\n      type: TranslateParser\n    }, {\n      type: MissingTranslationHandler\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_DEFAULT_LANG]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_STORE]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [USE_EXTEND]\n      }]\n    }, {\n      type: undefined,\n      decorators: [{\n        type: Inject,\n        args: [DEFAULT_LANGUAGE]\n      }]\n    }];\n  }, null);\n})();\nclass TranslateDirective {\n  constructor(translateService, element, _ref) {\n    this.translateService = translateService;\n    this.element = element;\n    this._ref = _ref;\n    // subscribe to onTranslationChange event, in case the translations of the current lang change\n    if (!this.onTranslationChangeSub) {\n      this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe(event => {\n        if (event.lang === this.translateService.currentLang) {\n          this.checkNodes(true, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChangeSub) {\n      this.onLangChangeSub = this.translateService.onLangChange.subscribe(event => {\n        this.checkNodes(true, event.translations);\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe(event => {\n        this.checkNodes(true);\n      });\n    }\n  }\n  set translate(key) {\n    if (key) {\n      this.key = key;\n      this.checkNodes();\n    }\n  }\n  set translateParams(params) {\n    if (!equals(this.currentParams, params)) {\n      this.currentParams = params;\n      this.checkNodes(true);\n    }\n  }\n  ngAfterViewChecked() {\n    this.checkNodes();\n  }\n  checkNodes(forceUpdate = false, translations) {\n    let nodes = this.element.nativeElement.childNodes;\n    // if the element is empty\n    if (!nodes.length) {\n      // we add the key as content\n      this.setContent(this.element.nativeElement, this.key);\n      nodes = this.element.nativeElement.childNodes;\n    }\n    for (let i = 0; i < nodes.length; ++i) {\n      let node = nodes[i];\n      if (node.nodeType === 3) {\n        // node type 3 is a text node\n        let key;\n        if (forceUpdate) {\n          node.lastKey = null;\n        }\n        if (isDefined(node.lookupKey)) {\n          key = node.lookupKey;\n        } else if (this.key) {\n          key = this.key;\n        } else {\n          let content = this.getContent(node);\n          let trimmedContent = content.trim();\n          if (trimmedContent.length) {\n            node.lookupKey = trimmedContent;\n            // we want to use the content as a key, not the translation value\n            if (content !== node.currentValue) {\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            } else if (node.originalContent) {\n              // the content seems ok, but the lang has changed\n              // the current content is the translation, not the key, use the last real content as key\n              key = node.originalContent.trim();\n            } else if (content !== node.currentValue) {\n              // we want to use the content as a key, not the translation value\n              key = trimmedContent;\n              // the content was changed from the user, we'll use it as a reference if needed\n              node.originalContent = content || node.originalContent;\n            }\n          }\n        }\n        this.updateValue(key, node, translations);\n      }\n    }\n  }\n  updateValue(key, node, translations) {\n    if (key) {\n      if (node.lastKey === key && this.lastParams === this.currentParams) {\n        return;\n      }\n      this.lastParams = this.currentParams;\n      let onTranslation = res => {\n        if (res !== key) {\n          node.lastKey = key;\n        }\n        if (!node.originalContent) {\n          node.originalContent = this.getContent(node);\n        }\n        node.currentValue = isDefined(res) ? res : node.originalContent || key;\n        // we replace in the original content to preserve spaces that we might have trimmed\n        this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\n        this._ref.markForCheck();\n      };\n      if (isDefined(translations)) {\n        let res = this.translateService.getParsedResult(translations, key, this.currentParams);\n        if (isObservable(res)) {\n          res.subscribe({\n            next: onTranslation\n          });\n        } else {\n          onTranslation(res);\n        }\n      } else {\n        this.translateService.get(key, this.currentParams).subscribe(onTranslation);\n      }\n    }\n  }\n  getContent(node) {\n    return isDefined(node.textContent) ? node.textContent : node.data;\n  }\n  setContent(node, content) {\n    if (isDefined(node.textContent)) {\n      node.textContent = content;\n    } else {\n      node.data = content;\n    }\n  }\n  ngOnDestroy() {\n    if (this.onLangChangeSub) {\n      this.onLangChangeSub.unsubscribe();\n    }\n    if (this.onDefaultLangChangeSub) {\n      this.onDefaultLangChangeSub.unsubscribe();\n    }\n    if (this.onTranslationChangeSub) {\n      this.onTranslationChangeSub.unsubscribe();\n    }\n  }\n}\nTranslateDirective.ɵfac = function TranslateDirective_Factory(t) {\n  return new (t || TranslateDirective)(i0.ɵɵdirectiveInject(TranslateService), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef));\n};\nTranslateDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: TranslateDirective,\n  selectors: [[\"\", \"translate\", \"\"], [\"\", \"ngx-translate\", \"\"]],\n  inputs: {\n    translate: \"translate\",\n    translateParams: \"translateParams\"\n  }\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateDirective, [{\n    type: Directive,\n    args: [{\n      selector: '[translate],[ngx-translate]'\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, {\n    translate: [{\n      type: Input\n    }],\n    translateParams: [{\n      type: Input\n    }]\n  });\n})();\nclass TranslatePipe {\n  constructor(translate, _ref) {\n    this.translate = translate;\n    this._ref = _ref;\n    this.value = '';\n    this.lastKey = null;\n    this.lastParams = [];\n  }\n  updateValue(key, interpolateParams, translations) {\n    let onTranslation = res => {\n      this.value = res !== undefined ? res : key;\n      this.lastKey = key;\n      this._ref.markForCheck();\n    };\n    if (translations) {\n      let res = this.translate.getParsedResult(translations, key, interpolateParams);\n      if (isObservable(res.subscribe)) {\n        res.subscribe(onTranslation);\n      } else {\n        onTranslation(res);\n      }\n    }\n    this.translate.get(key, interpolateParams).subscribe(onTranslation);\n  }\n  transform(query, ...args) {\n    if (!query || !query.length) {\n      return query;\n    }\n    // if we ask another time for the same key, return the last value\n    if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\n      return this.value;\n    }\n    let interpolateParams = undefined;\n    if (isDefined(args[0]) && args.length) {\n      if (typeof args[0] === 'string' && args[0].length) {\n        // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\n        // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\n        let validArgs = args[0].replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":').replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\n        try {\n          interpolateParams = JSON.parse(validArgs);\n        } catch (e) {\n          throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\n        }\n      } else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\n        interpolateParams = args[0];\n      }\n    }\n    // store the query, in case it changes\n    this.lastKey = query;\n    // store the params, in case they change\n    this.lastParams = args;\n    // set the value\n    this.updateValue(query, interpolateParams);\n    // if there is a subscription to onLangChange, clean it\n    this._dispose();\n    // subscribe to onTranslationChange event, in case the translations change\n    if (!this.onTranslationChange) {\n      this.onTranslationChange = this.translate.onTranslationChange.subscribe(event => {\n        if (this.lastKey && event.lang === this.translate.currentLang) {\n          this.lastKey = null;\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onLangChange event, in case the language changes\n    if (!this.onLangChange) {\n      this.onLangChange = this.translate.onLangChange.subscribe(event => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams, event.translations);\n        }\n      });\n    }\n    // subscribe to onDefaultLangChange event, in case the default language changes\n    if (!this.onDefaultLangChange) {\n      this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\n        if (this.lastKey) {\n          this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\n          this.updateValue(query, interpolateParams);\n        }\n      });\n    }\n    return this.value;\n  }\n  /**\r\n   * Clean any existing subscription to change events\r\n   */\n  _dispose() {\n    if (typeof this.onTranslationChange !== 'undefined') {\n      this.onTranslationChange.unsubscribe();\n      this.onTranslationChange = undefined;\n    }\n    if (typeof this.onLangChange !== 'undefined') {\n      this.onLangChange.unsubscribe();\n      this.onLangChange = undefined;\n    }\n    if (typeof this.onDefaultLangChange !== 'undefined') {\n      this.onDefaultLangChange.unsubscribe();\n      this.onDefaultLangChange = undefined;\n    }\n  }\n  ngOnDestroy() {\n    this._dispose();\n  }\n}\nTranslatePipe.ɵfac = function TranslatePipe_Factory(t) {\n  return new (t || TranslatePipe)(i0.ɵɵdirectiveInject(TranslateService, 16), i0.ɵɵdirectiveInject(i0.ChangeDetectorRef, 16));\n};\nTranslatePipe.ɵpipe = /* @__PURE__ */i0.ɵɵdefinePipe({\n  name: \"translate\",\n  type: TranslatePipe,\n  pure: false\n});\nTranslatePipe.ɵprov = /* @__PURE__ */i0.ɵɵdefineInjectable({\n  token: TranslatePipe,\n  factory: TranslatePipe.ɵfac\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslatePipe, [{\n    type: Injectable\n  }, {\n    type: Pipe,\n    args: [{\n      name: 'translate',\n      pure: false // required to update the value when the promise is resolved\n    }]\n  }], function () {\n    return [{\n      type: TranslateService\n    }, {\n      type: i0.ChangeDetectorRef\n    }];\n  }, null);\n})();\nclass TranslateModule {\n  /**\r\n   * Use this method in your root module to provide the TranslateService\r\n   */\n  static forRoot(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, TranslateStore, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n  /**\r\n   * Use this method in your other (non root) modules to import the directive/pipe\r\n   */\n  static forChild(config = {}) {\n    return {\n      ngModule: TranslateModule,\n      providers: [config.loader || {\n        provide: TranslateLoader,\n        useClass: TranslateFakeLoader\n      }, config.compiler || {\n        provide: TranslateCompiler,\n        useClass: TranslateFakeCompiler\n      }, config.parser || {\n        provide: TranslateParser,\n        useClass: TranslateDefaultParser\n      }, config.missingTranslationHandler || {\n        provide: MissingTranslationHandler,\n        useClass: FakeMissingTranslationHandler\n      }, {\n        provide: USE_STORE,\n        useValue: config.isolate\n      }, {\n        provide: USE_DEFAULT_LANG,\n        useValue: config.useDefaultLang\n      }, {\n        provide: USE_EXTEND,\n        useValue: config.extend\n      }, {\n        provide: DEFAULT_LANGUAGE,\n        useValue: config.defaultLanguage\n      }, TranslateService]\n    };\n  }\n}\nTranslateModule.ɵfac = function TranslateModule_Factory(t) {\n  return new (t || TranslateModule)();\n};\nTranslateModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: TranslateModule\n});\nTranslateModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(TranslateModule, [{\n    type: NgModule,\n    args: [{\n      declarations: [TranslatePipe, TranslateDirective],\n      exports: [TranslatePipe, TranslateDirective]\n    }]\n  }], null, null);\n})();\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };","map":{"version":3,"names":["i0","Injectable","EventEmitter","InjectionToken","Inject","Directive","Input","Pipe","NgModule","of","isObservable","forkJoin","concat","defer","take","shareReplay","map","concatMap","switchMap","TranslateLoader","TranslateFakeLoader","getTranslation","lang","ɵfac","ɵprov","type","MissingTranslationHandler","FakeMissingTranslationHandler","handle","params","key","equals","o1","o2","t1","t2","length","keySet","Array","isArray","Object","create","isDefined","value","isObject","item","mergeDeep","target","source","output","assign","keys","forEach","TranslateParser","TranslateDefaultParser","constructor","arguments","templateMatcher","interpolate","expr","result","interpolateString","interpolateFunction","getValue","split","shift","undefined","fn","replace","substring","b","r","TranslateCompiler","TranslateFakeCompiler","compile","compileTranslations","translations","TranslateStore","currentLang","defaultLang","langs","onTranslationChange","onLangChange","onDefaultLangChange","USE_STORE","USE_DEFAULT_LANG","DEFAULT_LANGUAGE","USE_EXTEND","TranslateService","store","currentLoader","compiler","parser","missingTranslationHandler","useDefaultLang","isolate","extend","defaultLanguage","pending","_onTranslationChange","_onLangChange","_onDefaultLangChange","_langs","_translations","_translationRequests","setDefaultLang","_defaultLang","_currentLang","retrieveTranslations","pipe","subscribe","res","changeDefaultLang","getDefaultLang","use","changeLang","loadingTranslations","next","updateLangs","error","err","setTranslation","shouldMerge","emit","getLangs","addLangs","indexOf","push","getParsedResult","interpolateParams","observables","k","sources","arr","obj","index","translateService","get","Error","getStreamOnTranslationChange","event","stream","instant","set","reloadLang","resetLang","getBrowserLang","window","navigator","browserLang","languages","language","browserLanguage","userLanguage","getBrowserCultureLang","browserCultureLang","decorators","args","TranslateDirective","element","_ref","onTranslationChangeSub","checkNodes","onLangChangeSub","onDefaultLangChangeSub","translate","translateParams","currentParams","ngAfterViewChecked","forceUpdate","nodes","nativeElement","childNodes","setContent","i","node","nodeType","lastKey","lookupKey","content","getContent","trimmedContent","trim","currentValue","originalContent","updateValue","lastParams","onTranslation","markForCheck","textContent","data","ngOnDestroy","unsubscribe","ElementRef","ChangeDetectorRef","ɵdir","selector","TranslatePipe","transform","query","validArgs","JSON","parse","e","SyntaxError","_dispose","ɵpipe","name","pure","TranslateModule","forRoot","config","ngModule","providers","loader","provide","useClass","useValue","forChild","ɵmod","ɵinj","declarations","exports"],"sources":["C:/VUELING/app_cracks/node_modules/@ngx-translate/core/fesm2020/ngx-translate-core.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { Injectable, EventEmitter, InjectionToken, Inject, Directive, Input, Pipe, NgModule } from '@angular/core';\nimport { of, isObservable, forkJoin, concat, defer } from 'rxjs';\nimport { take, shareReplay, map, concatMap, switchMap } from 'rxjs/operators';\n\nclass TranslateLoader {\r\n}\r\n/**\r\n * This loader is just a placeholder that does nothing, in case you don't need a loader at all\r\n */\r\nclass TranslateFakeLoader extends TranslateLoader {\r\n    getTranslation(lang) {\r\n        return of({});\r\n    }\r\n}\r\nTranslateFakeLoader.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateFakeLoader.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeLoader, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass MissingTranslationHandler {\r\n}\r\n/**\r\n * This handler is just a placeholder that does nothing, in case you don't need a missing translation handler at all\r\n */\r\nclass FakeMissingTranslationHandler {\r\n    handle(params) {\r\n        return params.key;\r\n    }\r\n}\r\nFakeMissingTranslationHandler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, deps: [], target: i0.ɵɵFactoryTarget.Injectable });\r\nFakeMissingTranslationHandler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: FakeMissingTranslationHandler, decorators: [{\r\n            type: Injectable\r\n        }] });\n\n/* tslint:disable */\r\n/**\r\n * Determines if two objects or two values are equivalent.\r\n *\r\n * Two objects or values are considered equivalent if at least one of the following is true:\r\n *\r\n * * Both objects or values pass `===` comparison.\r\n * * Both objects or values are of the same type and all of their properties are equal by\r\n *   comparing them with `equals`.\r\n *\r\n * @param o1 Object or value to compare.\r\n * @param o2 Object or value to compare.\r\n * @returns true if arguments are equal.\r\n */\r\nfunction equals(o1, o2) {\r\n    if (o1 === o2)\r\n        return true;\r\n    if (o1 === null || o2 === null)\r\n        return false;\r\n    if (o1 !== o1 && o2 !== o2)\r\n        return true; // NaN === NaN\r\n    let t1 = typeof o1, t2 = typeof o2, length, key, keySet;\r\n    if (t1 == t2 && t1 == 'object') {\r\n        if (Array.isArray(o1)) {\r\n            if (!Array.isArray(o2))\r\n                return false;\r\n            if ((length = o1.length) == o2.length) {\r\n                for (key = 0; key < length; key++) {\r\n                    if (!equals(o1[key], o2[key]))\r\n                        return false;\r\n                }\r\n                return true;\r\n            }\r\n        }\r\n        else {\r\n            if (Array.isArray(o2)) {\r\n                return false;\r\n            }\r\n            keySet = Object.create(null);\r\n            for (key in o1) {\r\n                if (!equals(o1[key], o2[key])) {\r\n                    return false;\r\n                }\r\n                keySet[key] = true;\r\n            }\r\n            for (key in o2) {\r\n                if (!(key in keySet) && typeof o2[key] !== 'undefined') {\r\n                    return false;\r\n                }\r\n            }\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n}\r\n/* tslint:enable */\r\nfunction isDefined(value) {\r\n    return typeof value !== 'undefined' && value !== null;\r\n}\r\nfunction isObject(item) {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\nfunction mergeDeep(target, source) {\r\n    let output = Object.assign({}, target);\r\n    if (isObject(target) && isObject(source)) {\r\n        Object.keys(source).forEach((key) => {\r\n            if (isObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                }\r\n                else {\r\n                    output[key] = mergeDeep(target[key], source[key]);\r\n                }\r\n            }\r\n            else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n}\n\nclass TranslateParser {\r\n}\r\nclass TranslateDefaultParser extends TranslateParser {\r\n    constructor() {\r\n        super(...arguments);\r\n        this.templateMatcher = /{{\\s?([^{}\\s]*)\\s?}}/g;\r\n    }\r\n    interpolate(expr, params) {\r\n        let result;\r\n        if (typeof expr === 'string') {\r\n            result = this.interpolateString(expr, params);\r\n        }\r\n        else if (typeof expr === 'function') {\r\n            result = this.interpolateFunction(expr, params);\r\n        }\r\n        else {\r\n            // this should not happen, but an unrelated TranslateService test depends on it\r\n            result = expr;\r\n        }\r\n        return result;\r\n    }\r\n    getValue(target, key) {\r\n        let keys = typeof key === 'string' ? key.split('.') : [key];\r\n        key = '';\r\n        do {\r\n            key += keys.shift();\r\n            if (isDefined(target) && isDefined(target[key]) && (typeof target[key] === 'object' || !keys.length)) {\r\n                target = target[key];\r\n                key = '';\r\n            }\r\n            else if (!keys.length) {\r\n                target = undefined;\r\n            }\r\n            else {\r\n                key += '.';\r\n            }\r\n        } while (keys.length);\r\n        return target;\r\n    }\r\n    interpolateFunction(fn, params) {\r\n        return fn(params);\r\n    }\r\n    interpolateString(expr, params) {\r\n        if (!params) {\r\n            return expr;\r\n        }\r\n        return expr.replace(this.templateMatcher, (substring, b) => {\r\n            let r = this.getValue(params, b);\r\n            return isDefined(r) ? r : substring;\r\n        });\r\n    }\r\n}\r\nTranslateDefaultParser.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateDefaultParser.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDefaultParser, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass TranslateCompiler {\r\n}\r\n/**\r\n * This compiler is just a placeholder that does nothing, in case you don't need a compiler at all\r\n */\r\nclass TranslateFakeCompiler extends TranslateCompiler {\r\n    compile(value, lang) {\r\n        return value;\r\n    }\r\n    compileTranslations(translations, lang) {\r\n        return translations;\r\n    }\r\n}\r\nTranslateFakeCompiler.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler, deps: null, target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateFakeCompiler.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateFakeCompiler, decorators: [{\r\n            type: Injectable\r\n        }] });\n\nclass TranslateStore {\r\n    constructor() {\r\n        /**\r\n         * The lang currently used\r\n         */\r\n        this.currentLang = this.defaultLang;\r\n        /**\r\n         * a list of translations per lang\r\n         */\r\n        this.translations = {};\r\n        /**\r\n         * an array of langs\r\n         */\r\n        this.langs = [];\r\n        /**\r\n         * An EventEmitter to listen to translation change events\r\n         * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onTranslationChange = new EventEmitter();\r\n        /**\r\n         * An EventEmitter to listen to lang change events\r\n         * onLangChange.subscribe((params: LangChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onLangChange = new EventEmitter();\r\n        /**\r\n         * An EventEmitter to listen to default lang change events\r\n         * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n           *     // do something\r\n           * });\r\n         */\r\n        this.onDefaultLangChange = new EventEmitter();\r\n    }\r\n}\n\nconst USE_STORE = new InjectionToken('USE_STORE');\r\nconst USE_DEFAULT_LANG = new InjectionToken('USE_DEFAULT_LANG');\r\nconst DEFAULT_LANGUAGE = new InjectionToken('DEFAULT_LANGUAGE');\r\nconst USE_EXTEND = new InjectionToken('USE_EXTEND');\r\nclass TranslateService {\r\n    /**\r\n     *\r\n     * @param store an instance of the store (that is supposed to be unique)\r\n     * @param currentLoader An instance of the loader currently used\r\n     * @param compiler An instance of the compiler currently used\r\n     * @param parser An instance of the parser currently used\r\n     * @param missingTranslationHandler A handler for missing translations.\r\n     * @param useDefaultLang whether we should use default language translation when current language translation is missing.\r\n     * @param isolate whether this service should use the store or not\r\n     * @param extend To make a child module extend (and use) translations from parent modules.\r\n     * @param defaultLanguage Set the default language using configuration\r\n     */\r\n    constructor(store, currentLoader, compiler, parser, missingTranslationHandler, useDefaultLang = true, isolate = false, extend = false, defaultLanguage) {\r\n        this.store = store;\r\n        this.currentLoader = currentLoader;\r\n        this.compiler = compiler;\r\n        this.parser = parser;\r\n        this.missingTranslationHandler = missingTranslationHandler;\r\n        this.useDefaultLang = useDefaultLang;\r\n        this.isolate = isolate;\r\n        this.extend = extend;\r\n        this.pending = false;\r\n        this._onTranslationChange = new EventEmitter();\r\n        this._onLangChange = new EventEmitter();\r\n        this._onDefaultLangChange = new EventEmitter();\r\n        this._langs = [];\r\n        this._translations = {};\r\n        this._translationRequests = {};\r\n        /** set the default language from configuration */\r\n        if (defaultLanguage) {\r\n            this.setDefaultLang(defaultLanguage);\r\n        }\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to translation change events\r\n     * onTranslationChange.subscribe((params: TranslationChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onTranslationChange() {\r\n        return this.isolate ? this._onTranslationChange : this.store.onTranslationChange;\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to lang change events\r\n     * onLangChange.subscribe((params: LangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onLangChange() {\r\n        return this.isolate ? this._onLangChange : this.store.onLangChange;\r\n    }\r\n    /**\r\n     * An EventEmitter to listen to default lang change events\r\n     * onDefaultLangChange.subscribe((params: DefaultLangChangeEvent) => {\r\n       *     // do something\r\n       * });\r\n     */\r\n    get onDefaultLangChange() {\r\n        return this.isolate ? this._onDefaultLangChange : this.store.onDefaultLangChange;\r\n    }\r\n    /**\r\n     * The default lang to fallback when translations are missing on the current lang\r\n     */\r\n    get defaultLang() {\r\n        return this.isolate ? this._defaultLang : this.store.defaultLang;\r\n    }\r\n    set defaultLang(defaultLang) {\r\n        if (this.isolate) {\r\n            this._defaultLang = defaultLang;\r\n        }\r\n        else {\r\n            this.store.defaultLang = defaultLang;\r\n        }\r\n    }\r\n    /**\r\n     * The lang currently used\r\n     */\r\n    get currentLang() {\r\n        return this.isolate ? this._currentLang : this.store.currentLang;\r\n    }\r\n    set currentLang(currentLang) {\r\n        if (this.isolate) {\r\n            this._currentLang = currentLang;\r\n        }\r\n        else {\r\n            this.store.currentLang = currentLang;\r\n        }\r\n    }\r\n    /**\r\n     * an array of langs\r\n     */\r\n    get langs() {\r\n        return this.isolate ? this._langs : this.store.langs;\r\n    }\r\n    set langs(langs) {\r\n        if (this.isolate) {\r\n            this._langs = langs;\r\n        }\r\n        else {\r\n            this.store.langs = langs;\r\n        }\r\n    }\r\n    /**\r\n     * a list of translations per lang\r\n     */\r\n    get translations() {\r\n        return this.isolate ? this._translations : this.store.translations;\r\n    }\r\n    set translations(translations) {\r\n        if (this.isolate) {\r\n            this._translations = translations;\r\n        }\r\n        else {\r\n            this.store.translations = translations;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the default language to use as a fallback\r\n     */\r\n    setDefaultLang(lang) {\r\n        if (lang === this.defaultLang) {\r\n            return;\r\n        }\r\n        let pending = this.retrieveTranslations(lang);\r\n        if (typeof pending !== \"undefined\") {\r\n            // on init set the defaultLang immediately\r\n            if (this.defaultLang == null) {\r\n                this.defaultLang = lang;\r\n            }\r\n            pending.pipe(take(1))\r\n                .subscribe((res) => {\r\n                this.changeDefaultLang(lang);\r\n            });\r\n        }\r\n        else { // we already have this language\r\n            this.changeDefaultLang(lang);\r\n        }\r\n    }\r\n    /**\r\n     * Gets the default language used\r\n     */\r\n    getDefaultLang() {\r\n        return this.defaultLang;\r\n    }\r\n    /**\r\n     * Changes the lang currently used\r\n     */\r\n    use(lang) {\r\n        // don't change the language if the language given is already selected\r\n        if (lang === this.currentLang) {\r\n            return of(this.translations[lang]);\r\n        }\r\n        let pending = this.retrieveTranslations(lang);\r\n        if (typeof pending !== \"undefined\") {\r\n            // on init set the currentLang immediately\r\n            if (!this.currentLang) {\r\n                this.currentLang = lang;\r\n            }\r\n            pending.pipe(take(1))\r\n                .subscribe((res) => {\r\n                this.changeLang(lang);\r\n            });\r\n            return pending;\r\n        }\r\n        else { // we have this language, return an Observable\r\n            this.changeLang(lang);\r\n            return of(this.translations[lang]);\r\n        }\r\n    }\r\n    /**\r\n     * Retrieves the given translations\r\n     */\r\n    retrieveTranslations(lang) {\r\n        let pending;\r\n        // if this language is unavailable or extend is true, ask for it\r\n        if (typeof this.translations[lang] === \"undefined\" || this.extend) {\r\n            this._translationRequests[lang] = this._translationRequests[lang] || this.getTranslation(lang);\r\n            pending = this._translationRequests[lang];\r\n        }\r\n        return pending;\r\n    }\r\n    /**\r\n     * Gets an object of translations for a given language with the current loader\r\n     * and passes it through the compiler\r\n     */\r\n    getTranslation(lang) {\r\n        this.pending = true;\r\n        const loadingTranslations = this.currentLoader.getTranslation(lang).pipe(shareReplay(1), take(1));\r\n        this.loadingTranslations = loadingTranslations.pipe(map((res) => this.compiler.compileTranslations(res, lang)), shareReplay(1), take(1));\r\n        this.loadingTranslations\r\n            .subscribe({\r\n            next: (res) => {\r\n                this.translations[lang] = this.extend && this.translations[lang] ? { ...res, ...this.translations[lang] } : res;\r\n                this.updateLangs();\r\n                this.pending = false;\r\n            },\r\n            error: (err) => {\r\n                this.pending = false;\r\n            }\r\n        });\r\n        return loadingTranslations;\r\n    }\r\n    /**\r\n     * Manually sets an object of translations for a given language\r\n     * after passing it through the compiler\r\n     */\r\n    setTranslation(lang, translations, shouldMerge = false) {\r\n        translations = this.compiler.compileTranslations(translations, lang);\r\n        if ((shouldMerge || this.extend) && this.translations[lang]) {\r\n            this.translations[lang] = mergeDeep(this.translations[lang], translations);\r\n        }\r\n        else {\r\n            this.translations[lang] = translations;\r\n        }\r\n        this.updateLangs();\r\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Returns an array of currently available langs\r\n     */\r\n    getLangs() {\r\n        return this.langs;\r\n    }\r\n    /**\r\n     * Add available langs\r\n     */\r\n    addLangs(langs) {\r\n        langs.forEach((lang) => {\r\n            if (this.langs.indexOf(lang) === -1) {\r\n                this.langs.push(lang);\r\n            }\r\n        });\r\n    }\r\n    /**\r\n     * Update the list of available langs\r\n     */\r\n    updateLangs() {\r\n        this.addLangs(Object.keys(this.translations));\r\n    }\r\n    /**\r\n     * Returns the parsed result of the translations\r\n     */\r\n    getParsedResult(translations, key, interpolateParams) {\r\n        let res;\r\n        if (key instanceof Array) {\r\n            let result = {}, observables = false;\r\n            for (let k of key) {\r\n                result[k] = this.getParsedResult(translations, k, interpolateParams);\r\n                if (isObservable(result[k])) {\r\n                    observables = true;\r\n                }\r\n            }\r\n            if (observables) {\r\n                const sources = key.map(k => isObservable(result[k]) ? result[k] : of(result[k]));\r\n                return forkJoin(sources).pipe(map((arr) => {\r\n                    let obj = {};\r\n                    arr.forEach((value, index) => {\r\n                        obj[key[index]] = value;\r\n                    });\r\n                    return obj;\r\n                }));\r\n            }\r\n            return result;\r\n        }\r\n        if (translations) {\r\n            res = this.parser.interpolate(this.parser.getValue(translations, key), interpolateParams);\r\n        }\r\n        if (typeof res === \"undefined\" && this.defaultLang != null && this.defaultLang !== this.currentLang && this.useDefaultLang) {\r\n            res = this.parser.interpolate(this.parser.getValue(this.translations[this.defaultLang], key), interpolateParams);\r\n        }\r\n        if (typeof res === \"undefined\") {\r\n            let params = { key, translateService: this };\r\n            if (typeof interpolateParams !== 'undefined') {\r\n                params.interpolateParams = interpolateParams;\r\n            }\r\n            res = this.missingTranslationHandler.handle(params);\r\n        }\r\n        return typeof res !== \"undefined\" ? res : key;\r\n    }\r\n    /**\r\n     * Gets the translated value of a key (or an array of keys)\r\n     * @returns the translated key, or an object of translated keys\r\n     */\r\n    get(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        // check if we are loading a new translation to use\r\n        if (this.pending) {\r\n            return this.loadingTranslations.pipe(concatMap((res) => {\r\n                res = this.getParsedResult(res, key, interpolateParams);\r\n                return isObservable(res) ? res : of(res);\r\n            }));\r\n        }\r\n        else {\r\n            let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n            return isObservable(res) ? res : of(res);\r\n        }\r\n    }\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the translation changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    getStreamOnTranslationChange(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        return concat(defer(() => this.get(key, interpolateParams)), this.onTranslationChange.pipe(switchMap((event) => {\r\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n            if (typeof res.subscribe === 'function') {\r\n                return res;\r\n            }\r\n            else {\r\n                return of(res);\r\n            }\r\n        })));\r\n    }\r\n    /**\r\n     * Returns a stream of translated values of a key (or an array of keys) which updates\r\n     * whenever the language changes.\r\n     * @returns A stream of the translated key, or an object of translated keys\r\n     */\r\n    stream(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        return concat(defer(() => this.get(key, interpolateParams)), this.onLangChange.pipe(switchMap((event) => {\r\n            const res = this.getParsedResult(event.translations, key, interpolateParams);\r\n            return isObservable(res) ? res : of(res);\r\n        })));\r\n    }\r\n    /**\r\n     * Returns a translation instantly from the internal state of loaded translation.\r\n     * All rules regarding the current language, the preferred language of even fallback languages will be used except any promise handling.\r\n     */\r\n    instant(key, interpolateParams) {\r\n        if (!isDefined(key) || !key.length) {\r\n            throw new Error(`Parameter \"key\" required`);\r\n        }\r\n        let res = this.getParsedResult(this.translations[this.currentLang], key, interpolateParams);\r\n        if (isObservable(res)) {\r\n            if (key instanceof Array) {\r\n                let obj = {};\r\n                key.forEach((value, index) => {\r\n                    obj[key[index]] = key[index];\r\n                });\r\n                return obj;\r\n            }\r\n            return key;\r\n        }\r\n        else {\r\n            return res;\r\n        }\r\n    }\r\n    /**\r\n     * Sets the translated value of a key, after compiling it\r\n     */\r\n    set(key, value, lang = this.currentLang) {\r\n        this.translations[lang][key] = this.compiler.compile(value, lang);\r\n        this.updateLangs();\r\n        this.onTranslationChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Changes the current lang\r\n     */\r\n    changeLang(lang) {\r\n        this.currentLang = lang;\r\n        this.onLangChange.emit({ lang: lang, translations: this.translations[lang] });\r\n        // if there is no default lang, use the one that we just set\r\n        if (this.defaultLang == null) {\r\n            this.changeDefaultLang(lang);\r\n        }\r\n    }\r\n    /**\r\n     * Changes the default lang\r\n     */\r\n    changeDefaultLang(lang) {\r\n        this.defaultLang = lang;\r\n        this.onDefaultLangChange.emit({ lang: lang, translations: this.translations[lang] });\r\n    }\r\n    /**\r\n     * Allows to reload the lang file from the file\r\n     */\r\n    reloadLang(lang) {\r\n        this.resetLang(lang);\r\n        return this.getTranslation(lang);\r\n    }\r\n    /**\r\n     * Deletes inner translation\r\n     */\r\n    resetLang(lang) {\r\n        this._translationRequests[lang] = undefined;\r\n        this.translations[lang] = undefined;\r\n    }\r\n    /**\r\n     * Returns the language code name from the browser, e.g. \"de\"\r\n     */\r\n    getBrowserLang() {\r\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n            return undefined;\r\n        }\r\n        let browserLang = window.navigator.languages ? window.navigator.languages[0] : null;\r\n        browserLang = browserLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n        if (typeof browserLang === 'undefined') {\r\n            return undefined;\r\n        }\r\n        if (browserLang.indexOf('-') !== -1) {\r\n            browserLang = browserLang.split('-')[0];\r\n        }\r\n        if (browserLang.indexOf('_') !== -1) {\r\n            browserLang = browserLang.split('_')[0];\r\n        }\r\n        return browserLang;\r\n    }\r\n    /**\r\n     * Returns the culture language code name from the browser, e.g. \"de-DE\"\r\n     */\r\n    getBrowserCultureLang() {\r\n        if (typeof window === 'undefined' || typeof window.navigator === 'undefined') {\r\n            return undefined;\r\n        }\r\n        let browserCultureLang = window.navigator.languages ? window.navigator.languages[0] : null;\r\n        browserCultureLang = browserCultureLang || window.navigator.language || window.navigator.browserLanguage || window.navigator.userLanguage;\r\n        return browserCultureLang;\r\n    }\r\n}\r\nTranslateService.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService, deps: [{ token: TranslateStore }, { token: TranslateLoader }, { token: TranslateCompiler }, { token: TranslateParser }, { token: MissingTranslationHandler }, { token: USE_DEFAULT_LANG }, { token: USE_STORE }, { token: USE_EXTEND }, { token: DEFAULT_LANGUAGE }], target: i0.ɵɵFactoryTarget.Injectable });\r\nTranslateService.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateService, decorators: [{\r\n            type: Injectable\r\n        }], ctorParameters: function () { return [{ type: TranslateStore }, { type: TranslateLoader }, { type: TranslateCompiler }, { type: TranslateParser }, { type: MissingTranslationHandler }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [USE_DEFAULT_LANG]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [USE_STORE]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [USE_EXTEND]\r\n                }] }, { type: undefined, decorators: [{\r\n                    type: Inject,\r\n                    args: [DEFAULT_LANGUAGE]\r\n                }] }]; } });\n\nclass TranslateDirective {\r\n    constructor(translateService, element, _ref) {\r\n        this.translateService = translateService;\r\n        this.element = element;\r\n        this._ref = _ref;\r\n        // subscribe to onTranslationChange event, in case the translations of the current lang change\r\n        if (!this.onTranslationChangeSub) {\r\n            this.onTranslationChangeSub = this.translateService.onTranslationChange.subscribe((event) => {\r\n                if (event.lang === this.translateService.currentLang) {\r\n                    this.checkNodes(true, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChangeSub) {\r\n            this.onLangChangeSub = this.translateService.onLangChange.subscribe((event) => {\r\n                this.checkNodes(true, event.translations);\r\n            });\r\n        }\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChangeSub) {\r\n            this.onDefaultLangChangeSub = this.translateService.onDefaultLangChange.subscribe((event) => {\r\n                this.checkNodes(true);\r\n            });\r\n        }\r\n    }\r\n    set translate(key) {\r\n        if (key) {\r\n            this.key = key;\r\n            this.checkNodes();\r\n        }\r\n    }\r\n    set translateParams(params) {\r\n        if (!equals(this.currentParams, params)) {\r\n            this.currentParams = params;\r\n            this.checkNodes(true);\r\n        }\r\n    }\r\n    ngAfterViewChecked() {\r\n        this.checkNodes();\r\n    }\r\n    checkNodes(forceUpdate = false, translations) {\r\n        let nodes = this.element.nativeElement.childNodes;\r\n        // if the element is empty\r\n        if (!nodes.length) {\r\n            // we add the key as content\r\n            this.setContent(this.element.nativeElement, this.key);\r\n            nodes = this.element.nativeElement.childNodes;\r\n        }\r\n        for (let i = 0; i < nodes.length; ++i) {\r\n            let node = nodes[i];\r\n            if (node.nodeType === 3) { // node type 3 is a text node\r\n                let key;\r\n                if (forceUpdate) {\r\n                    node.lastKey = null;\r\n                }\r\n                if (isDefined(node.lookupKey)) {\r\n                    key = node.lookupKey;\r\n                }\r\n                else if (this.key) {\r\n                    key = this.key;\r\n                }\r\n                else {\r\n                    let content = this.getContent(node);\r\n                    let trimmedContent = content.trim();\r\n                    if (trimmedContent.length) {\r\n                        node.lookupKey = trimmedContent;\r\n                        // we want to use the content as a key, not the translation value\r\n                        if (content !== node.currentValue) {\r\n                            key = trimmedContent;\r\n                            // the content was changed from the user, we'll use it as a reference if needed\r\n                            node.originalContent = content || node.originalContent;\r\n                        }\r\n                        else if (node.originalContent) { // the content seems ok, but the lang has changed\r\n                            // the current content is the translation, not the key, use the last real content as key\r\n                            key = node.originalContent.trim();\r\n                        }\r\n                        else if (content !== node.currentValue) {\r\n                            // we want to use the content as a key, not the translation value\r\n                            key = trimmedContent;\r\n                            // the content was changed from the user, we'll use it as a reference if needed\r\n                            node.originalContent = content || node.originalContent;\r\n                        }\r\n                    }\r\n                }\r\n                this.updateValue(key, node, translations);\r\n            }\r\n        }\r\n    }\r\n    updateValue(key, node, translations) {\r\n        if (key) {\r\n            if (node.lastKey === key && this.lastParams === this.currentParams) {\r\n                return;\r\n            }\r\n            this.lastParams = this.currentParams;\r\n            let onTranslation = (res) => {\r\n                if (res !== key) {\r\n                    node.lastKey = key;\r\n                }\r\n                if (!node.originalContent) {\r\n                    node.originalContent = this.getContent(node);\r\n                }\r\n                node.currentValue = isDefined(res) ? res : (node.originalContent || key);\r\n                // we replace in the original content to preserve spaces that we might have trimmed\r\n                this.setContent(node, this.key ? node.currentValue : node.originalContent.replace(key, node.currentValue));\r\n                this._ref.markForCheck();\r\n            };\r\n            if (isDefined(translations)) {\r\n                let res = this.translateService.getParsedResult(translations, key, this.currentParams);\r\n                if (isObservable(res)) {\r\n                    res.subscribe({ next: onTranslation });\r\n                }\r\n                else {\r\n                    onTranslation(res);\r\n                }\r\n            }\r\n            else {\r\n                this.translateService.get(key, this.currentParams).subscribe(onTranslation);\r\n            }\r\n        }\r\n    }\r\n    getContent(node) {\r\n        return isDefined(node.textContent) ? node.textContent : node.data;\r\n    }\r\n    setContent(node, content) {\r\n        if (isDefined(node.textContent)) {\r\n            node.textContent = content;\r\n        }\r\n        else {\r\n            node.data = content;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        if (this.onLangChangeSub) {\r\n            this.onLangChangeSub.unsubscribe();\r\n        }\r\n        if (this.onDefaultLangChangeSub) {\r\n            this.onDefaultLangChangeSub.unsubscribe();\r\n        }\r\n        if (this.onTranslationChangeSub) {\r\n            this.onTranslationChangeSub.unsubscribe();\r\n        }\r\n    }\r\n}\r\nTranslateDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDirective, deps: [{ token: TranslateService }, { token: i0.ElementRef }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Directive });\r\nTranslateDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.0.0\", type: TranslateDirective, selector: \"[translate],[ngx-translate]\", inputs: { translate: \"translate\", translateParams: \"translateParams\" }, ngImport: i0 });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateDirective, decorators: [{\r\n            type: Directive,\r\n            args: [{\r\n                    selector: '[translate],[ngx-translate]'\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ElementRef }, { type: i0.ChangeDetectorRef }]; }, propDecorators: { translate: [{\r\n                type: Input\r\n            }], translateParams: [{\r\n                type: Input\r\n            }] } });\n\nclass TranslatePipe {\r\n    constructor(translate, _ref) {\r\n        this.translate = translate;\r\n        this._ref = _ref;\r\n        this.value = '';\r\n        this.lastKey = null;\r\n        this.lastParams = [];\r\n    }\r\n    updateValue(key, interpolateParams, translations) {\r\n        let onTranslation = (res) => {\r\n            this.value = res !== undefined ? res : key;\r\n            this.lastKey = key;\r\n            this._ref.markForCheck();\r\n        };\r\n        if (translations) {\r\n            let res = this.translate.getParsedResult(translations, key, interpolateParams);\r\n            if (isObservable(res.subscribe)) {\r\n                res.subscribe(onTranslation);\r\n            }\r\n            else {\r\n                onTranslation(res);\r\n            }\r\n        }\r\n        this.translate.get(key, interpolateParams).subscribe(onTranslation);\r\n    }\r\n    transform(query, ...args) {\r\n        if (!query || !query.length) {\r\n            return query;\r\n        }\r\n        // if we ask another time for the same key, return the last value\r\n        if (equals(query, this.lastKey) && equals(args, this.lastParams)) {\r\n            return this.value;\r\n        }\r\n        let interpolateParams = undefined;\r\n        if (isDefined(args[0]) && args.length) {\r\n            if (typeof args[0] === 'string' && args[0].length) {\r\n                // we accept objects written in the template such as {n:1}, {'n':1}, {n:'v'}\r\n                // which is why we might need to change it to real JSON objects such as {\"n\":1} or {\"n\":\"v\"}\r\n                let validArgs = args[0]\r\n                    .replace(/(\\')?([a-zA-Z0-9_]+)(\\')?(\\s)?:/g, '\"$2\":')\r\n                    .replace(/:(\\s)?(\\')(.*?)(\\')/g, ':\"$3\"');\r\n                try {\r\n                    interpolateParams = JSON.parse(validArgs);\r\n                }\r\n                catch (e) {\r\n                    throw new SyntaxError(`Wrong parameter in TranslatePipe. Expected a valid Object, received: ${args[0]}`);\r\n                }\r\n            }\r\n            else if (typeof args[0] === 'object' && !Array.isArray(args[0])) {\r\n                interpolateParams = args[0];\r\n            }\r\n        }\r\n        // store the query, in case it changes\r\n        this.lastKey = query;\r\n        // store the params, in case they change\r\n        this.lastParams = args;\r\n        // set the value\r\n        this.updateValue(query, interpolateParams);\r\n        // if there is a subscription to onLangChange, clean it\r\n        this._dispose();\r\n        // subscribe to onTranslationChange event, in case the translations change\r\n        if (!this.onTranslationChange) {\r\n            this.onTranslationChange = this.translate.onTranslationChange.subscribe((event) => {\r\n                if (this.lastKey && event.lang === this.translate.currentLang) {\r\n                    this.lastKey = null;\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onLangChange event, in case the language changes\r\n        if (!this.onLangChange) {\r\n            this.onLangChange = this.translate.onLangChange.subscribe((event) => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams, event.translations);\r\n                }\r\n            });\r\n        }\r\n        // subscribe to onDefaultLangChange event, in case the default language changes\r\n        if (!this.onDefaultLangChange) {\r\n            this.onDefaultLangChange = this.translate.onDefaultLangChange.subscribe(() => {\r\n                if (this.lastKey) {\r\n                    this.lastKey = null; // we want to make sure it doesn't return the same value until it's been updated\r\n                    this.updateValue(query, interpolateParams);\r\n                }\r\n            });\r\n        }\r\n        return this.value;\r\n    }\r\n    /**\r\n     * Clean any existing subscription to change events\r\n     */\r\n    _dispose() {\r\n        if (typeof this.onTranslationChange !== 'undefined') {\r\n            this.onTranslationChange.unsubscribe();\r\n            this.onTranslationChange = undefined;\r\n        }\r\n        if (typeof this.onLangChange !== 'undefined') {\r\n            this.onLangChange.unsubscribe();\r\n            this.onLangChange = undefined;\r\n        }\r\n        if (typeof this.onDefaultLangChange !== 'undefined') {\r\n            this.onDefaultLangChange.unsubscribe();\r\n            this.onDefaultLangChange = undefined;\r\n        }\r\n    }\r\n    ngOnDestroy() {\r\n        this._dispose();\r\n    }\r\n}\r\nTranslatePipe.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, deps: [{ token: TranslateService }, { token: i0.ChangeDetectorRef }], target: i0.ɵɵFactoryTarget.Pipe });\r\nTranslatePipe.ɵpipe = i0.ɵɵngDeclarePipe({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, name: \"translate\", pure: false });\r\nTranslatePipe.ɵprov = i0.ɵɵngDeclareInjectable({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslatePipe, decorators: [{\r\n            type: Injectable\r\n        }, {\r\n            type: Pipe,\r\n            args: [{\r\n                    name: 'translate',\r\n                    pure: false // required to update the value when the promise is resolved\r\n                }]\r\n        }], ctorParameters: function () { return [{ type: TranslateService }, { type: i0.ChangeDetectorRef }]; } });\n\nclass TranslateModule {\r\n    /**\r\n     * Use this method in your root module to provide the TranslateService\r\n     */\r\n    static forRoot(config = {}) {\r\n        return {\r\n            ngModule: TranslateModule,\r\n            providers: [\r\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\r\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\r\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\r\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\r\n                TranslateStore,\r\n                { provide: USE_STORE, useValue: config.isolate },\r\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\r\n                { provide: USE_EXTEND, useValue: config.extend },\r\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\r\n                TranslateService\r\n            ]\r\n        };\r\n    }\r\n    /**\r\n     * Use this method in your other (non root) modules to import the directive/pipe\r\n     */\r\n    static forChild(config = {}) {\r\n        return {\r\n            ngModule: TranslateModule,\r\n            providers: [\r\n                config.loader || { provide: TranslateLoader, useClass: TranslateFakeLoader },\r\n                config.compiler || { provide: TranslateCompiler, useClass: TranslateFakeCompiler },\r\n                config.parser || { provide: TranslateParser, useClass: TranslateDefaultParser },\r\n                config.missingTranslationHandler || { provide: MissingTranslationHandler, useClass: FakeMissingTranslationHandler },\r\n                { provide: USE_STORE, useValue: config.isolate },\r\n                { provide: USE_DEFAULT_LANG, useValue: config.useDefaultLang },\r\n                { provide: USE_EXTEND, useValue: config.extend },\r\n                { provide: DEFAULT_LANGUAGE, useValue: config.defaultLanguage },\r\n                TranslateService\r\n            ]\r\n        };\r\n    }\r\n}\r\nTranslateModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\r\nTranslateModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, declarations: [TranslatePipe,\r\n        TranslateDirective], exports: [TranslatePipe,\r\n        TranslateDirective] });\r\nTranslateModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule });\r\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.0.0\", ngImport: i0, type: TranslateModule, decorators: [{\r\n            type: NgModule,\r\n            args: [{\r\n                    declarations: [\r\n                        TranslatePipe,\r\n                        TranslateDirective\r\n                    ],\r\n                    exports: [\r\n                        TranslatePipe,\r\n                        TranslateDirective\r\n                    ]\r\n                }]\r\n        }] });\n\n/**\r\n * Generated bundle index. Do not edit.\r\n */\n\nexport { DEFAULT_LANGUAGE, FakeMissingTranslationHandler, MissingTranslationHandler, TranslateCompiler, TranslateDefaultParser, TranslateDirective, TranslateFakeCompiler, TranslateFakeLoader, TranslateLoader, TranslateModule, TranslateParser, TranslatePipe, TranslateService, TranslateStore, USE_DEFAULT_LANG, USE_EXTEND, USE_STORE };\n"],"mappings":"AAAA,OAAO,KAAKA,EAAE,MAAM,eAAe;AACnC,SAASC,UAAU,EAAEC,YAAY,EAAEC,cAAc,EAAEC,MAAM,EAAEC,SAAS,EAAEC,KAAK,EAAEC,IAAI,EAAEC,QAAQ,QAAQ,eAAe;AAClH,SAASC,EAAE,EAAEC,YAAY,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,KAAK,QAAQ,MAAM;AAChE,SAASC,IAAI,EAAEC,WAAW,EAAEC,GAAG,EAAEC,SAAS,EAAEC,SAAS,QAAQ,gBAAgB;AAE7E,MAAMC,eAAe,CAAC;AAEtB;AACA;AACA;AACA,MAAMC,mBAAmB,SAASD,eAAe,CAAC;EAC9CE,cAAc,CAACC,IAAI,EAAE;IACjB,OAAOb,EAAE,CAAC,CAAC,CAAC,CAAC;EACjB;AACJ;AACAW,mBAAmB,CAACG,IAAI;EAAA;EAAA;IAAA,gFAA8EvB,EAAE,uBAAQoB,mBAAmB,SAAnBA,mBAAmB;EAAA;AAAA,GAAsD;AACzLA,mBAAmB,CAACI,KAAK,kBAD6ExB,EAAE;EAAA,OACYoB,mBAAmB;EAAA,SAAnBA,mBAAmB;AAAA,EAAG;AAC1I;EAAA,mDAFsGpB,EAAE,mBAEboB,mBAAmB,EAAc,CAAC;IACjHK,IAAI,EAAExB;EACV,CAAC,CAAC;AAAA;AAEV,MAAMyB,yBAAyB,CAAC;AAEhC;AACA;AACA;AACA,MAAMC,6BAA6B,CAAC;EAChCC,MAAM,CAACC,MAAM,EAAE;IACX,OAAOA,MAAM,CAACC,GAAG;EACrB;AACJ;AACAH,6BAA6B,CAACJ,IAAI;EAAA,iBAAwFI,6BAA6B;AAAA,CAAoD;AAC3MA,6BAA6B,CAACH,KAAK,kBAjBmExB,EAAE;EAAA,OAiBsB2B,6BAA6B;EAAA,SAA7BA,6BAA6B;AAAA,EAAG;AAC9J;EAAA,mDAlBsG3B,EAAE,mBAkBb2B,6BAA6B,EAAc,CAAC;IAC3HF,IAAI,EAAExB;EACV,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,SAAS8B,MAAM,CAACC,EAAE,EAAEC,EAAE,EAAE;EACpB,IAAID,EAAE,KAAKC,EAAE,EACT,OAAO,IAAI;EACf,IAAID,EAAE,KAAK,IAAI,IAAIC,EAAE,KAAK,IAAI,EAC1B,OAAO,KAAK;EAChB,IAAID,EAAE,KAAKA,EAAE,IAAIC,EAAE,KAAKA,EAAE,EACtB,OAAO,IAAI,CAAC,CAAC;EACjB,IAAIC,EAAE,GAAG,OAAOF,EAAE;IAAEG,EAAE,GAAG,OAAOF,EAAE;IAAEG,MAAM;IAAEN,GAAG;IAAEO,MAAM;EACvD,IAAIH,EAAE,IAAIC,EAAE,IAAID,EAAE,IAAI,QAAQ,EAAE;IAC5B,IAAII,KAAK,CAACC,OAAO,CAACP,EAAE,CAAC,EAAE;MACnB,IAAI,CAACM,KAAK,CAACC,OAAO,CAACN,EAAE,CAAC,EAClB,OAAO,KAAK;MAChB,IAAI,CAACG,MAAM,GAAGJ,EAAE,CAACI,MAAM,KAAKH,EAAE,CAACG,MAAM,EAAE;QACnC,KAAKN,GAAG,GAAG,CAAC,EAAEA,GAAG,GAAGM,MAAM,EAAEN,GAAG,EAAE,EAAE;UAC/B,IAAI,CAACC,MAAM,CAACC,EAAE,CAACF,GAAG,CAAC,EAAEG,EAAE,CAACH,GAAG,CAAC,CAAC,EACzB,OAAO,KAAK;QACpB;QACA,OAAO,IAAI;MACf;IACJ,CAAC,MACI;MACD,IAAIQ,KAAK,CAACC,OAAO,CAACN,EAAE,CAAC,EAAE;QACnB,OAAO,KAAK;MAChB;MACAI,MAAM,GAAGG,MAAM,CAACC,MAAM,CAAC,IAAI,CAAC;MAC5B,KAAKX,GAAG,IAAIE,EAAE,EAAE;QACZ,IAAI,CAACD,MAAM,CAACC,EAAE,CAACF,GAAG,CAAC,EAAEG,EAAE,CAACH,GAAG,CAAC,CAAC,EAAE;UAC3B,OAAO,KAAK;QAChB;QACAO,MAAM,CAACP,GAAG,CAAC,GAAG,IAAI;MACtB;MACA,KAAKA,GAAG,IAAIG,EAAE,EAAE;QACZ,IAAI,EAAEH,GAAG,IAAIO,MAAM,CAAC,IAAI,OAAOJ,EAAE,CAACH,GAAG,CAAC,KAAK,WAAW,EAAE;UACpD,OAAO,KAAK;QAChB;MACJ;MACA,OAAO,IAAI;IACf;EACJ;EACA,OAAO,KAAK;AAChB;AACA;AACA,SAASY,SAAS,CAACC,KAAK,EAAE;EACtB,OAAO,OAAOA,KAAK,KAAK,WAAW,IAAIA,KAAK,KAAK,IAAI;AACzD;AACA,SAASC,QAAQ,CAACC,IAAI,EAAE;EACpB,OAAQA,IAAI,IAAI,OAAOA,IAAI,KAAK,QAAQ,IAAI,CAACP,KAAK,CAACC,OAAO,CAACM,IAAI,CAAC;AACpE;AACA,SAASC,SAAS,CAACC,MAAM,EAAEC,MAAM,EAAE;EAC/B,IAAIC,MAAM,GAAGT,MAAM,CAACU,MAAM,CAAC,CAAC,CAAC,EAAEH,MAAM,CAAC;EACtC,IAAIH,QAAQ,CAACG,MAAM,CAAC,IAAIH,QAAQ,CAACI,MAAM,CAAC,EAAE;IACtCR,MAAM,CAACW,IAAI,CAACH,MAAM,CAAC,CAACI,OAAO,CAAEtB,GAAG,IAAK;MACjC,IAAIc,QAAQ,CAACI,MAAM,CAAClB,GAAG,CAAC,CAAC,EAAE;QACvB,IAAI,EAAEA,GAAG,IAAIiB,MAAM,CAAC,EAAE;UAClBP,MAAM,CAACU,MAAM,CAACD,MAAM,EAAE;YAAE,CAACnB,GAAG,GAAGkB,MAAM,CAAClB,GAAG;UAAE,CAAC,CAAC;QACjD,CAAC,MACI;UACDmB,MAAM,CAACnB,GAAG,CAAC,GAAGgB,SAAS,CAACC,MAAM,CAACjB,GAAG,CAAC,EAAEkB,MAAM,CAAClB,GAAG,CAAC,CAAC;QACrD;MACJ,CAAC,MACI;QACDU,MAAM,CAACU,MAAM,CAACD,MAAM,EAAE;UAAE,CAACnB,GAAG,GAAGkB,MAAM,CAAClB,GAAG;QAAE,CAAC,CAAC;MACjD;IACJ,CAAC,CAAC;EACN;EACA,OAAOmB,MAAM;AACjB;AAEA,MAAMI,eAAe,CAAC;AAEtB,MAAMC,sBAAsB,SAASD,eAAe,CAAC;EACjDE,WAAW,GAAG;IACV,KAAK,CAAC,GAAGC,SAAS,CAAC;IACnB,IAAI,CAACC,eAAe,GAAG,uBAAuB;EAClD;EACAC,WAAW,CAACC,IAAI,EAAE9B,MAAM,EAAE;IACtB,IAAI+B,MAAM;IACV,IAAI,OAAOD,IAAI,KAAK,QAAQ,EAAE;MAC1BC,MAAM,GAAG,IAAI,CAACC,iBAAiB,CAACF,IAAI,EAAE9B,MAAM,CAAC;IACjD,CAAC,MACI,IAAI,OAAO8B,IAAI,KAAK,UAAU,EAAE;MACjCC,MAAM,GAAG,IAAI,CAACE,mBAAmB,CAACH,IAAI,EAAE9B,MAAM,CAAC;IACnD,CAAC,MACI;MACD;MACA+B,MAAM,GAAGD,IAAI;IACjB;IACA,OAAOC,MAAM;EACjB;EACAG,QAAQ,CAAChB,MAAM,EAAEjB,GAAG,EAAE;IAClB,IAAIqB,IAAI,GAAG,OAAOrB,GAAG,KAAK,QAAQ,GAAGA,GAAG,CAACkC,KAAK,CAAC,GAAG,CAAC,GAAG,CAAClC,GAAG,CAAC;IAC3DA,GAAG,GAAG,EAAE;IACR,GAAG;MACCA,GAAG,IAAIqB,IAAI,CAACc,KAAK,EAAE;MACnB,IAAIvB,SAAS,CAACK,MAAM,CAAC,IAAIL,SAAS,CAACK,MAAM,CAACjB,GAAG,CAAC,CAAC,KAAK,OAAOiB,MAAM,CAACjB,GAAG,CAAC,KAAK,QAAQ,IAAI,CAACqB,IAAI,CAACf,MAAM,CAAC,EAAE;QAClGW,MAAM,GAAGA,MAAM,CAACjB,GAAG,CAAC;QACpBA,GAAG,GAAG,EAAE;MACZ,CAAC,MACI,IAAI,CAACqB,IAAI,CAACf,MAAM,EAAE;QACnBW,MAAM,GAAGmB,SAAS;MACtB,CAAC,MACI;QACDpC,GAAG,IAAI,GAAG;MACd;IACJ,CAAC,QAAQqB,IAAI,CAACf,MAAM;IACpB,OAAOW,MAAM;EACjB;EACAe,mBAAmB,CAACK,EAAE,EAAEtC,MAAM,EAAE;IAC5B,OAAOsC,EAAE,CAACtC,MAAM,CAAC;EACrB;EACAgC,iBAAiB,CAACF,IAAI,EAAE9B,MAAM,EAAE;IAC5B,IAAI,CAACA,MAAM,EAAE;MACT,OAAO8B,IAAI;IACf;IACA,OAAOA,IAAI,CAACS,OAAO,CAAC,IAAI,CAACX,eAAe,EAAE,CAACY,SAAS,EAAEC,CAAC,KAAK;MACxD,IAAIC,CAAC,GAAG,IAAI,CAACR,QAAQ,CAAClC,MAAM,EAAEyC,CAAC,CAAC;MAChC,OAAO5B,SAAS,CAAC6B,CAAC,CAAC,GAAGA,CAAC,GAAGF,SAAS;IACvC,CAAC,CAAC;EACN;AACJ;AACAf,sBAAsB,CAAC/B,IAAI;EAAA;EAAA;IAAA,sFA5J2EvB,EAAE,uBA4JWsD,sBAAsB,SAAtBA,sBAAsB;EAAA;AAAA,GAAsD;AAC/LA,sBAAsB,CAAC9B,KAAK,kBA7J0ExB,EAAE;EAAA,OA6JesD,sBAAsB;EAAA,SAAtBA,sBAAsB;AAAA,EAAG;AAChJ;EAAA,mDA9JsGtD,EAAE,mBA8JbsD,sBAAsB,EAAc,CAAC;IACpH7B,IAAI,EAAExB;EACV,CAAC,CAAC;AAAA;AAEV,MAAMuE,iBAAiB,CAAC;AAExB;AACA;AACA;AACA,MAAMC,qBAAqB,SAASD,iBAAiB,CAAC;EAClDE,OAAO,CAAC/B,KAAK,EAAErB,IAAI,EAAE;IACjB,OAAOqB,KAAK;EAChB;EACAgC,mBAAmB,CAACC,YAAY,EAAEtD,IAAI,EAAE;IACpC,OAAOsD,YAAY;EACvB;AACJ;AACAH,qBAAqB,CAAClD,IAAI;EAAA;EAAA;IAAA,oFA/K4EvB,EAAE,uBA+KUyE,qBAAqB,SAArBA,qBAAqB;EAAA;AAAA,GAAsD;AAC7LA,qBAAqB,CAACjD,KAAK,kBAhL2ExB,EAAE;EAAA,OAgLcyE,qBAAqB;EAAA,SAArBA,qBAAqB;AAAA,EAAG;AAC9I;EAAA,mDAjLsGzE,EAAE,mBAiLbyE,qBAAqB,EAAc,CAAC;IACnHhD,IAAI,EAAExB;EACV,CAAC,CAAC;AAAA;AAEV,MAAM4E,cAAc,CAAC;EACjBtB,WAAW,GAAG;IACV;AACR;AACA;IACQ,IAAI,CAACuB,WAAW,GAAG,IAAI,CAACC,WAAW;IACnC;AACR;AACA;IACQ,IAAI,CAACH,YAAY,GAAG,CAAC,CAAC;IACtB;AACR;AACA;IACQ,IAAI,CAACI,KAAK,GAAG,EAAE;IACf;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACC,mBAAmB,GAAG,IAAI/E,YAAY,EAAE;IAC7C;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACgF,YAAY,GAAG,IAAIhF,YAAY,EAAE;IACtC;AACR;AACA;AACA;AACA;AACA;IACQ,IAAI,CAACiF,mBAAmB,GAAG,IAAIjF,YAAY,EAAE;EACjD;AACJ;AAEA,MAAMkF,SAAS,GAAG,IAAIjF,cAAc,CAAC,WAAW,CAAC;AACjD,MAAMkF,gBAAgB,GAAG,IAAIlF,cAAc,CAAC,kBAAkB,CAAC;AAC/D,MAAMmF,gBAAgB,GAAG,IAAInF,cAAc,CAAC,kBAAkB,CAAC;AAC/D,MAAMoF,UAAU,GAAG,IAAIpF,cAAc,CAAC,YAAY,CAAC;AACnD,MAAMqF,gBAAgB,CAAC;EACnB;AACJ;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;EACIjC,WAAW,CAACkC,KAAK,EAAEC,aAAa,EAAEC,QAAQ,EAAEC,MAAM,EAAEC,yBAAyB,EAAEC,cAAc,GAAG,IAAI,EAAEC,OAAO,GAAG,KAAK,EAAEC,MAAM,GAAG,KAAK,EAAEC,eAAe,EAAE;IACpJ,IAAI,CAACR,KAAK,GAAGA,KAAK;IAClB,IAAI,CAACC,aAAa,GAAGA,aAAa;IAClC,IAAI,CAACC,QAAQ,GAAGA,QAAQ;IACxB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACC,yBAAyB,GAAGA,yBAAyB;IAC1D,IAAI,CAACC,cAAc,GAAGA,cAAc;IACpC,IAAI,CAACC,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,MAAM,GAAGA,MAAM;IACpB,IAAI,CAACE,OAAO,GAAG,KAAK;IACpB,IAAI,CAACC,oBAAoB,GAAG,IAAIjG,YAAY,EAAE;IAC9C,IAAI,CAACkG,aAAa,GAAG,IAAIlG,YAAY,EAAE;IACvC,IAAI,CAACmG,oBAAoB,GAAG,IAAInG,YAAY,EAAE;IAC9C,IAAI,CAACoG,MAAM,GAAG,EAAE;IAChB,IAAI,CAACC,aAAa,GAAG,CAAC,CAAC;IACvB,IAAI,CAACC,oBAAoB,GAAG,CAAC,CAAC;IAC9B;IACA,IAAIP,eAAe,EAAE;MACjB,IAAI,CAACQ,cAAc,CAACR,eAAe,CAAC;IACxC;EACJ;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIhB,mBAAmB,GAAG;IACtB,OAAO,IAAI,CAACc,OAAO,GAAG,IAAI,CAACI,oBAAoB,GAAG,IAAI,CAACV,KAAK,CAACR,mBAAmB;EACpF;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,YAAY,GAAG;IACf,OAAO,IAAI,CAACa,OAAO,GAAG,IAAI,CAACK,aAAa,GAAG,IAAI,CAACX,KAAK,CAACP,YAAY;EACtE;EACA;AACJ;AACA;AACA;AACA;AACA;EACI,IAAIC,mBAAmB,GAAG;IACtB,OAAO,IAAI,CAACY,OAAO,GAAG,IAAI,CAACM,oBAAoB,GAAG,IAAI,CAACZ,KAAK,CAACN,mBAAmB;EACpF;EACA;AACJ;AACA;EACI,IAAIJ,WAAW,GAAG;IACd,OAAO,IAAI,CAACgB,OAAO,GAAG,IAAI,CAACW,YAAY,GAAG,IAAI,CAACjB,KAAK,CAACV,WAAW;EACpE;EACA,IAAIA,WAAW,CAACA,WAAW,EAAE;IACzB,IAAI,IAAI,CAACgB,OAAO,EAAE;MACd,IAAI,CAACW,YAAY,GAAG3B,WAAW;IACnC,CAAC,MACI;MACD,IAAI,CAACU,KAAK,CAACV,WAAW,GAAGA,WAAW;IACxC;EACJ;EACA;AACJ;AACA;EACI,IAAID,WAAW,GAAG;IACd,OAAO,IAAI,CAACiB,OAAO,GAAG,IAAI,CAACY,YAAY,GAAG,IAAI,CAAClB,KAAK,CAACX,WAAW;EACpE;EACA,IAAIA,WAAW,CAACA,WAAW,EAAE;IACzB,IAAI,IAAI,CAACiB,OAAO,EAAE;MACd,IAAI,CAACY,YAAY,GAAG7B,WAAW;IACnC,CAAC,MACI;MACD,IAAI,CAACW,KAAK,CAACX,WAAW,GAAGA,WAAW;IACxC;EACJ;EACA;AACJ;AACA;EACI,IAAIE,KAAK,GAAG;IACR,OAAO,IAAI,CAACe,OAAO,GAAG,IAAI,CAACO,MAAM,GAAG,IAAI,CAACb,KAAK,CAACT,KAAK;EACxD;EACA,IAAIA,KAAK,CAACA,KAAK,EAAE;IACb,IAAI,IAAI,CAACe,OAAO,EAAE;MACd,IAAI,CAACO,MAAM,GAAGtB,KAAK;IACvB,CAAC,MACI;MACD,IAAI,CAACS,KAAK,CAACT,KAAK,GAAGA,KAAK;IAC5B;EACJ;EACA;AACJ;AACA;EACI,IAAIJ,YAAY,GAAG;IACf,OAAO,IAAI,CAACmB,OAAO,GAAG,IAAI,CAACQ,aAAa,GAAG,IAAI,CAACd,KAAK,CAACb,YAAY;EACtE;EACA,IAAIA,YAAY,CAACA,YAAY,EAAE;IAC3B,IAAI,IAAI,CAACmB,OAAO,EAAE;MACd,IAAI,CAACQ,aAAa,GAAG3B,YAAY;IACrC,CAAC,MACI;MACD,IAAI,CAACa,KAAK,CAACb,YAAY,GAAGA,YAAY;IAC1C;EACJ;EACA;AACJ;AACA;EACI6B,cAAc,CAACnF,IAAI,EAAE;IACjB,IAAIA,IAAI,KAAK,IAAI,CAACyD,WAAW,EAAE;MAC3B;IACJ;IACA,IAAImB,OAAO,GAAG,IAAI,CAACU,oBAAoB,CAACtF,IAAI,CAAC;IAC7C,IAAI,OAAO4E,OAAO,KAAK,WAAW,EAAE;MAChC;MACA,IAAI,IAAI,CAACnB,WAAW,IAAI,IAAI,EAAE;QAC1B,IAAI,CAACA,WAAW,GAAGzD,IAAI;MAC3B;MACA4E,OAAO,CAACW,IAAI,CAAC/F,IAAI,CAAC,CAAC,CAAC,CAAC,CAChBgG,SAAS,CAAEC,GAAG,IAAK;QACpB,IAAI,CAACC,iBAAiB,CAAC1F,IAAI,CAAC;MAChC,CAAC,CAAC;IACN,CAAC,MACI;MAAE;MACH,IAAI,CAAC0F,iBAAiB,CAAC1F,IAAI,CAAC;IAChC;EACJ;EACA;AACJ;AACA;EACI2F,cAAc,GAAG;IACb,OAAO,IAAI,CAAClC,WAAW;EAC3B;EACA;AACJ;AACA;EACImC,GAAG,CAAC5F,IAAI,EAAE;IACN;IACA,IAAIA,IAAI,KAAK,IAAI,CAACwD,WAAW,EAAE;MAC3B,OAAOrE,EAAE,CAAC,IAAI,CAACmE,YAAY,CAACtD,IAAI,CAAC,CAAC;IACtC;IACA,IAAI4E,OAAO,GAAG,IAAI,CAACU,oBAAoB,CAACtF,IAAI,CAAC;IAC7C,IAAI,OAAO4E,OAAO,KAAK,WAAW,EAAE;MAChC;MACA,IAAI,CAAC,IAAI,CAACpB,WAAW,EAAE;QACnB,IAAI,CAACA,WAAW,GAAGxD,IAAI;MAC3B;MACA4E,OAAO,CAACW,IAAI,CAAC/F,IAAI,CAAC,CAAC,CAAC,CAAC,CAChBgG,SAAS,CAAEC,GAAG,IAAK;QACpB,IAAI,CAACI,UAAU,CAAC7F,IAAI,CAAC;MACzB,CAAC,CAAC;MACF,OAAO4E,OAAO;IAClB,CAAC,MACI;MAAE;MACH,IAAI,CAACiB,UAAU,CAAC7F,IAAI,CAAC;MACrB,OAAOb,EAAE,CAAC,IAAI,CAACmE,YAAY,CAACtD,IAAI,CAAC,CAAC;IACtC;EACJ;EACA;AACJ;AACA;EACIsF,oBAAoB,CAACtF,IAAI,EAAE;IACvB,IAAI4E,OAAO;IACX;IACA,IAAI,OAAO,IAAI,CAACtB,YAAY,CAACtD,IAAI,CAAC,KAAK,WAAW,IAAI,IAAI,CAAC0E,MAAM,EAAE;MAC/D,IAAI,CAACQ,oBAAoB,CAAClF,IAAI,CAAC,GAAG,IAAI,CAACkF,oBAAoB,CAAClF,IAAI,CAAC,IAAI,IAAI,CAACD,cAAc,CAACC,IAAI,CAAC;MAC9F4E,OAAO,GAAG,IAAI,CAACM,oBAAoB,CAAClF,IAAI,CAAC;IAC7C;IACA,OAAO4E,OAAO;EAClB;EACA;AACJ;AACA;AACA;EACI7E,cAAc,CAACC,IAAI,EAAE;IACjB,IAAI,CAAC4E,OAAO,GAAG,IAAI;IACnB,MAAMkB,mBAAmB,GAAG,IAAI,CAAC1B,aAAa,CAACrE,cAAc,CAACC,IAAI,CAAC,CAACuF,IAAI,CAAC9F,WAAW,CAAC,CAAC,CAAC,EAAED,IAAI,CAAC,CAAC,CAAC,CAAC;IACjG,IAAI,CAACsG,mBAAmB,GAAGA,mBAAmB,CAACP,IAAI,CAAC7F,GAAG,CAAE+F,GAAG,IAAK,IAAI,CAACpB,QAAQ,CAAChB,mBAAmB,CAACoC,GAAG,EAAEzF,IAAI,CAAC,CAAC,EAAEP,WAAW,CAAC,CAAC,CAAC,EAAED,IAAI,CAAC,CAAC,CAAC,CAAC;IACxI,IAAI,CAACsG,mBAAmB,CACnBN,SAAS,CAAC;MACXO,IAAI,EAAGN,GAAG,IAAK;QACX,IAAI,CAACnC,YAAY,CAACtD,IAAI,CAAC,GAAG,IAAI,CAAC0E,MAAM,IAAI,IAAI,CAACpB,YAAY,CAACtD,IAAI,CAAC,GAAG;UAAE,GAAGyF,GAAG;UAAE,GAAG,IAAI,CAACnC,YAAY,CAACtD,IAAI;QAAE,CAAC,GAAGyF,GAAG;QAC/G,IAAI,CAACO,WAAW,EAAE;QAClB,IAAI,CAACpB,OAAO,GAAG,KAAK;MACxB,CAAC;MACDqB,KAAK,EAAGC,GAAG,IAAK;QACZ,IAAI,CAACtB,OAAO,GAAG,KAAK;MACxB;IACJ,CAAC,CAAC;IACF,OAAOkB,mBAAmB;EAC9B;EACA;AACJ;AACA;AACA;EACIK,cAAc,CAACnG,IAAI,EAAEsD,YAAY,EAAE8C,WAAW,GAAG,KAAK,EAAE;IACpD9C,YAAY,GAAG,IAAI,CAACe,QAAQ,CAAChB,mBAAmB,CAACC,YAAY,EAAEtD,IAAI,CAAC;IACpE,IAAI,CAACoG,WAAW,IAAI,IAAI,CAAC1B,MAAM,KAAK,IAAI,CAACpB,YAAY,CAACtD,IAAI,CAAC,EAAE;MACzD,IAAI,CAACsD,YAAY,CAACtD,IAAI,CAAC,GAAGwB,SAAS,CAAC,IAAI,CAAC8B,YAAY,CAACtD,IAAI,CAAC,EAAEsD,YAAY,CAAC;IAC9E,CAAC,MACI;MACD,IAAI,CAACA,YAAY,CAACtD,IAAI,CAAC,GAAGsD,YAAY;IAC1C;IACA,IAAI,CAAC0C,WAAW,EAAE;IAClB,IAAI,CAACrC,mBAAmB,CAAC0C,IAAI,CAAC;MAAErG,IAAI,EAAEA,IAAI;MAAEsD,YAAY,EAAE,IAAI,CAACA,YAAY,CAACtD,IAAI;IAAE,CAAC,CAAC;EACxF;EACA;AACJ;AACA;EACIsG,QAAQ,GAAG;IACP,OAAO,IAAI,CAAC5C,KAAK;EACrB;EACA;AACJ;AACA;EACI6C,QAAQ,CAAC7C,KAAK,EAAE;IACZA,KAAK,CAAC5B,OAAO,CAAE9B,IAAI,IAAK;MACpB,IAAI,IAAI,CAAC0D,KAAK,CAAC8C,OAAO,CAACxG,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE;QACjC,IAAI,CAAC0D,KAAK,CAAC+C,IAAI,CAACzG,IAAI,CAAC;MACzB;IACJ,CAAC,CAAC;EACN;EACA;AACJ;AACA;EACIgG,WAAW,GAAG;IACV,IAAI,CAACO,QAAQ,CAACrF,MAAM,CAACW,IAAI,CAAC,IAAI,CAACyB,YAAY,CAAC,CAAC;EACjD;EACA;AACJ;AACA;EACIoD,eAAe,CAACpD,YAAY,EAAE9C,GAAG,EAAEmG,iBAAiB,EAAE;IAClD,IAAIlB,GAAG;IACP,IAAIjF,GAAG,YAAYQ,KAAK,EAAE;MACtB,IAAIsB,MAAM,GAAG,CAAC,CAAC;QAAEsE,WAAW,GAAG,KAAK;MACpC,KAAK,IAAIC,CAAC,IAAIrG,GAAG,EAAE;QACf8B,MAAM,CAACuE,CAAC,CAAC,GAAG,IAAI,CAACH,eAAe,CAACpD,YAAY,EAAEuD,CAAC,EAAEF,iBAAiB,CAAC;QACpE,IAAIvH,YAAY,CAACkD,MAAM,CAACuE,CAAC,CAAC,CAAC,EAAE;UACzBD,WAAW,GAAG,IAAI;QACtB;MACJ;MACA,IAAIA,WAAW,EAAE;QACb,MAAME,OAAO,GAAGtG,GAAG,CAACd,GAAG,CAACmH,CAAC,IAAIzH,YAAY,CAACkD,MAAM,CAACuE,CAAC,CAAC,CAAC,GAAGvE,MAAM,CAACuE,CAAC,CAAC,GAAG1H,EAAE,CAACmD,MAAM,CAACuE,CAAC,CAAC,CAAC,CAAC;QACjF,OAAOxH,QAAQ,CAACyH,OAAO,CAAC,CAACvB,IAAI,CAAC7F,GAAG,CAAEqH,GAAG,IAAK;UACvC,IAAIC,GAAG,GAAG,CAAC,CAAC;UACZD,GAAG,CAACjF,OAAO,CAAC,CAACT,KAAK,EAAE4F,KAAK,KAAK;YAC1BD,GAAG,CAACxG,GAAG,CAACyG,KAAK,CAAC,CAAC,GAAG5F,KAAK;UAC3B,CAAC,CAAC;UACF,OAAO2F,GAAG;QACd,CAAC,CAAC,CAAC;MACP;MACA,OAAO1E,MAAM;IACjB;IACA,IAAIgB,YAAY,EAAE;MACdmC,GAAG,GAAG,IAAI,CAACnB,MAAM,CAAClC,WAAW,CAAC,IAAI,CAACkC,MAAM,CAAC7B,QAAQ,CAACa,YAAY,EAAE9C,GAAG,CAAC,EAAEmG,iBAAiB,CAAC;IAC7F;IACA,IAAI,OAAOlB,GAAG,KAAK,WAAW,IAAI,IAAI,CAAChC,WAAW,IAAI,IAAI,IAAI,IAAI,CAACA,WAAW,KAAK,IAAI,CAACD,WAAW,IAAI,IAAI,CAACgB,cAAc,EAAE;MACxHiB,GAAG,GAAG,IAAI,CAACnB,MAAM,CAAClC,WAAW,CAAC,IAAI,CAACkC,MAAM,CAAC7B,QAAQ,CAAC,IAAI,CAACa,YAAY,CAAC,IAAI,CAACG,WAAW,CAAC,EAAEjD,GAAG,CAAC,EAAEmG,iBAAiB,CAAC;IACpH;IACA,IAAI,OAAOlB,GAAG,KAAK,WAAW,EAAE;MAC5B,IAAIlF,MAAM,GAAG;QAAEC,GAAG;QAAE0G,gBAAgB,EAAE;MAAK,CAAC;MAC5C,IAAI,OAAOP,iBAAiB,KAAK,WAAW,EAAE;QAC1CpG,MAAM,CAACoG,iBAAiB,GAAGA,iBAAiB;MAChD;MACAlB,GAAG,GAAG,IAAI,CAAClB,yBAAyB,CAACjE,MAAM,CAACC,MAAM,CAAC;IACvD;IACA,OAAO,OAAOkF,GAAG,KAAK,WAAW,GAAGA,GAAG,GAAGjF,GAAG;EACjD;EACA;AACJ;AACA;AACA;EACI2G,GAAG,CAAC3G,GAAG,EAAEmG,iBAAiB,EAAE;IACxB,IAAI,CAACvF,SAAS,CAACZ,GAAG,CAAC,IAAI,CAACA,GAAG,CAACM,MAAM,EAAE;MAChC,MAAM,IAAIsG,KAAK,CAAE,0BAAyB,CAAC;IAC/C;IACA;IACA,IAAI,IAAI,CAACxC,OAAO,EAAE;MACd,OAAO,IAAI,CAACkB,mBAAmB,CAACP,IAAI,CAAC5F,SAAS,CAAE8F,GAAG,IAAK;QACpDA,GAAG,GAAG,IAAI,CAACiB,eAAe,CAACjB,GAAG,EAAEjF,GAAG,EAAEmG,iBAAiB,CAAC;QACvD,OAAOvH,YAAY,CAACqG,GAAG,CAAC,GAAGA,GAAG,GAAGtG,EAAE,CAACsG,GAAG,CAAC;MAC5C,CAAC,CAAC,CAAC;IACP,CAAC,MACI;MACD,IAAIA,GAAG,GAAG,IAAI,CAACiB,eAAe,CAAC,IAAI,CAACpD,YAAY,CAAC,IAAI,CAACE,WAAW,CAAC,EAAEhD,GAAG,EAAEmG,iBAAiB,CAAC;MAC3F,OAAOvH,YAAY,CAACqG,GAAG,CAAC,GAAGA,GAAG,GAAGtG,EAAE,CAACsG,GAAG,CAAC;IAC5C;EACJ;EACA;AACJ;AACA;AACA;AACA;EACI4B,4BAA4B,CAAC7G,GAAG,EAAEmG,iBAAiB,EAAE;IACjD,IAAI,CAACvF,SAAS,CAACZ,GAAG,CAAC,IAAI,CAACA,GAAG,CAACM,MAAM,EAAE;MAChC,MAAM,IAAIsG,KAAK,CAAE,0BAAyB,CAAC;IAC/C;IACA,OAAO9H,MAAM,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC4H,GAAG,CAAC3G,GAAG,EAAEmG,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAChD,mBAAmB,CAAC4B,IAAI,CAAC3F,SAAS,CAAE0H,KAAK,IAAK;MAC5G,MAAM7B,GAAG,GAAG,IAAI,CAACiB,eAAe,CAACY,KAAK,CAAChE,YAAY,EAAE9C,GAAG,EAAEmG,iBAAiB,CAAC;MAC5E,IAAI,OAAOlB,GAAG,CAACD,SAAS,KAAK,UAAU,EAAE;QACrC,OAAOC,GAAG;MACd,CAAC,MACI;QACD,OAAOtG,EAAE,CAACsG,GAAG,CAAC;MAClB;IACJ,CAAC,CAAC,CAAC,CAAC;EACR;EACA;AACJ;AACA;AACA;AACA;EACI8B,MAAM,CAAC/G,GAAG,EAAEmG,iBAAiB,EAAE;IAC3B,IAAI,CAACvF,SAAS,CAACZ,GAAG,CAAC,IAAI,CAACA,GAAG,CAACM,MAAM,EAAE;MAChC,MAAM,IAAIsG,KAAK,CAAE,0BAAyB,CAAC;IAC/C;IACA,OAAO9H,MAAM,CAACC,KAAK,CAAC,MAAM,IAAI,CAAC4H,GAAG,CAAC3G,GAAG,EAAEmG,iBAAiB,CAAC,CAAC,EAAE,IAAI,CAAC/C,YAAY,CAAC2B,IAAI,CAAC3F,SAAS,CAAE0H,KAAK,IAAK;MACrG,MAAM7B,GAAG,GAAG,IAAI,CAACiB,eAAe,CAACY,KAAK,CAAChE,YAAY,EAAE9C,GAAG,EAAEmG,iBAAiB,CAAC;MAC5E,OAAOvH,YAAY,CAACqG,GAAG,CAAC,GAAGA,GAAG,GAAGtG,EAAE,CAACsG,GAAG,CAAC;IAC5C,CAAC,CAAC,CAAC,CAAC;EACR;EACA;AACJ;AACA;AACA;EACI+B,OAAO,CAAChH,GAAG,EAAEmG,iBAAiB,EAAE;IAC5B,IAAI,CAACvF,SAAS,CAACZ,GAAG,CAAC,IAAI,CAACA,GAAG,CAACM,MAAM,EAAE;MAChC,MAAM,IAAIsG,KAAK,CAAE,0BAAyB,CAAC;IAC/C;IACA,IAAI3B,GAAG,GAAG,IAAI,CAACiB,eAAe,CAAC,IAAI,CAACpD,YAAY,CAAC,IAAI,CAACE,WAAW,CAAC,EAAEhD,GAAG,EAAEmG,iBAAiB,CAAC;IAC3F,IAAIvH,YAAY,CAACqG,GAAG,CAAC,EAAE;MACnB,IAAIjF,GAAG,YAAYQ,KAAK,EAAE;QACtB,IAAIgG,GAAG,GAAG,CAAC,CAAC;QACZxG,GAAG,CAACsB,OAAO,CAAC,CAACT,KAAK,EAAE4F,KAAK,KAAK;UAC1BD,GAAG,CAACxG,GAAG,CAACyG,KAAK,CAAC,CAAC,GAAGzG,GAAG,CAACyG,KAAK,CAAC;QAChC,CAAC,CAAC;QACF,OAAOD,GAAG;MACd;MACA,OAAOxG,GAAG;IACd,CAAC,MACI;MACD,OAAOiF,GAAG;IACd;EACJ;EACA;AACJ;AACA;EACIgC,GAAG,CAACjH,GAAG,EAAEa,KAAK,EAAErB,IAAI,GAAG,IAAI,CAACwD,WAAW,EAAE;IACrC,IAAI,CAACF,YAAY,CAACtD,IAAI,CAAC,CAACQ,GAAG,CAAC,GAAG,IAAI,CAAC6D,QAAQ,CAACjB,OAAO,CAAC/B,KAAK,EAAErB,IAAI,CAAC;IACjE,IAAI,CAACgG,WAAW,EAAE;IAClB,IAAI,CAACrC,mBAAmB,CAAC0C,IAAI,CAAC;MAAErG,IAAI,EAAEA,IAAI;MAAEsD,YAAY,EAAE,IAAI,CAACA,YAAY,CAACtD,IAAI;IAAE,CAAC,CAAC;EACxF;EACA;AACJ;AACA;EACI6F,UAAU,CAAC7F,IAAI,EAAE;IACb,IAAI,CAACwD,WAAW,GAAGxD,IAAI;IACvB,IAAI,CAAC4D,YAAY,CAACyC,IAAI,CAAC;MAAErG,IAAI,EAAEA,IAAI;MAAEsD,YAAY,EAAE,IAAI,CAACA,YAAY,CAACtD,IAAI;IAAE,CAAC,CAAC;IAC7E;IACA,IAAI,IAAI,CAACyD,WAAW,IAAI,IAAI,EAAE;MAC1B,IAAI,CAACiC,iBAAiB,CAAC1F,IAAI,CAAC;IAChC;EACJ;EACA;AACJ;AACA;EACI0F,iBAAiB,CAAC1F,IAAI,EAAE;IACpB,IAAI,CAACyD,WAAW,GAAGzD,IAAI;IACvB,IAAI,CAAC6D,mBAAmB,CAACwC,IAAI,CAAC;MAAErG,IAAI,EAAEA,IAAI;MAAEsD,YAAY,EAAE,IAAI,CAACA,YAAY,CAACtD,IAAI;IAAE,CAAC,CAAC;EACxF;EACA;AACJ;AACA;EACI0H,UAAU,CAAC1H,IAAI,EAAE;IACb,IAAI,CAAC2H,SAAS,CAAC3H,IAAI,CAAC;IACpB,OAAO,IAAI,CAACD,cAAc,CAACC,IAAI,CAAC;EACpC;EACA;AACJ;AACA;EACI2H,SAAS,CAAC3H,IAAI,EAAE;IACZ,IAAI,CAACkF,oBAAoB,CAAClF,IAAI,CAAC,GAAG4C,SAAS;IAC3C,IAAI,CAACU,YAAY,CAACtD,IAAI,CAAC,GAAG4C,SAAS;EACvC;EACA;AACJ;AACA;EACIgF,cAAc,GAAG;IACb,IAAI,OAAOC,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,SAAS,KAAK,WAAW,EAAE;MAC1E,OAAOlF,SAAS;IACpB;IACA,IAAImF,WAAW,GAAGF,MAAM,CAACC,SAAS,CAACE,SAAS,GAAGH,MAAM,CAACC,SAAS,CAACE,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IACnFD,WAAW,GAAGA,WAAW,IAAIF,MAAM,CAACC,SAAS,CAACG,QAAQ,IAAIJ,MAAM,CAACC,SAAS,CAACI,eAAe,IAAIL,MAAM,CAACC,SAAS,CAACK,YAAY;IAC3H,IAAI,OAAOJ,WAAW,KAAK,WAAW,EAAE;MACpC,OAAOnF,SAAS;IACpB;IACA,IAAImF,WAAW,CAACvB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACjCuB,WAAW,GAAGA,WAAW,CAACrF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C;IACA,IAAIqF,WAAW,CAACvB,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,EAAE;MACjCuB,WAAW,GAAGA,WAAW,CAACrF,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;IAC3C;IACA,OAAOqF,WAAW;EACtB;EACA;AACJ;AACA;EACIK,qBAAqB,GAAG;IACpB,IAAI,OAAOP,MAAM,KAAK,WAAW,IAAI,OAAOA,MAAM,CAACC,SAAS,KAAK,WAAW,EAAE;MAC1E,OAAOlF,SAAS;IACpB;IACA,IAAIyF,kBAAkB,GAAGR,MAAM,CAACC,SAAS,CAACE,SAAS,GAAGH,MAAM,CAACC,SAAS,CAACE,SAAS,CAAC,CAAC,CAAC,GAAG,IAAI;IAC1FK,kBAAkB,GAAGA,kBAAkB,IAAIR,MAAM,CAACC,SAAS,CAACG,QAAQ,IAAIJ,MAAM,CAACC,SAAS,CAACI,eAAe,IAAIL,MAAM,CAACC,SAAS,CAACK,YAAY;IACzI,OAAOE,kBAAkB;EAC7B;AACJ;AACAnE,gBAAgB,CAACjE,IAAI;EAAA,iBAAwFiE,gBAAgB,EA3oBvBxF,EAAE,UA2oBuC6E,cAAc,GA3oBvD7E,EAAE,UA2oBkEmB,eAAe,GA3oBnFnB,EAAE,UA2oB8FwE,iBAAiB,GA3oBjHxE,EAAE,UA2oB4HqD,eAAe,GA3oB7IrD,EAAE,UA2oBwJ0B,yBAAyB,GA3oBnL1B,EAAE,UA2oB8LqF,gBAAgB,GA3oBhNrF,EAAE,UA2oB2NoF,SAAS,GA3oBtOpF,EAAE,UA2oBiPuF,UAAU,GA3oB7PvF,EAAE,UA2oBwQsF,gBAAgB;AAAA,CAA6C;AAC7aE,gBAAgB,CAAChE,KAAK,kBA5oBgFxB,EAAE;EAAA,OA4oBSwF,gBAAgB;EAAA,SAAhBA,gBAAgB;AAAA,EAAG;AACpI;EAAA,mDA7oBsGxF,EAAE,mBA6oBbwF,gBAAgB,EAAc,CAAC;IAC9G/D,IAAI,EAAExB;EACV,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEwB,IAAI,EAAEoD;IAAe,CAAC,EAAE;MAAEpD,IAAI,EAAEN;IAAgB,CAAC,EAAE;MAAEM,IAAI,EAAE+C;IAAkB,CAAC,EAAE;MAAE/C,IAAI,EAAE4B;IAAgB,CAAC,EAAE;MAAE5B,IAAI,EAAEC;IAA0B,CAAC,EAAE;MAAED,IAAI,EAAEyC,SAAS;MAAE0F,UAAU,EAAE,CAAC;QAChNnI,IAAI,EAAErB,MAAM;QACZyJ,IAAI,EAAE,CAACxE,gBAAgB;MAC3B,CAAC;IAAE,CAAC,EAAE;MAAE5D,IAAI,EAAEyC,SAAS;MAAE0F,UAAU,EAAE,CAAC;QAClCnI,IAAI,EAAErB,MAAM;QACZyJ,IAAI,EAAE,CAACzE,SAAS;MACpB,CAAC;IAAE,CAAC,EAAE;MAAE3D,IAAI,EAAEyC,SAAS;MAAE0F,UAAU,EAAE,CAAC;QAClCnI,IAAI,EAAErB,MAAM;QACZyJ,IAAI,EAAE,CAACtE,UAAU;MACrB,CAAC;IAAE,CAAC,EAAE;MAAE9D,IAAI,EAAEyC,SAAS;MAAE0F,UAAU,EAAE,CAAC;QAClCnI,IAAI,EAAErB,MAAM;QACZyJ,IAAI,EAAE,CAACvE,gBAAgB;MAC3B,CAAC;IAAE,CAAC,CAAC;EAAE,CAAC;AAAA;AAExB,MAAMwE,kBAAkB,CAAC;EACrBvG,WAAW,CAACiF,gBAAgB,EAAEuB,OAAO,EAAEC,IAAI,EAAE;IACzC,IAAI,CAACxB,gBAAgB,GAAGA,gBAAgB;IACxC,IAAI,CAACuB,OAAO,GAAGA,OAAO;IACtB,IAAI,CAACC,IAAI,GAAGA,IAAI;IAChB;IACA,IAAI,CAAC,IAAI,CAACC,sBAAsB,EAAE;MAC9B,IAAI,CAACA,sBAAsB,GAAG,IAAI,CAACzB,gBAAgB,CAACvD,mBAAmB,CAAC6B,SAAS,CAAE8B,KAAK,IAAK;QACzF,IAAIA,KAAK,CAACtH,IAAI,KAAK,IAAI,CAACkH,gBAAgB,CAAC1D,WAAW,EAAE;UAClD,IAAI,CAACoF,UAAU,CAAC,IAAI,EAAEtB,KAAK,CAAChE,YAAY,CAAC;QAC7C;MACJ,CAAC,CAAC;IACN;IACA;IACA,IAAI,CAAC,IAAI,CAACuF,eAAe,EAAE;MACvB,IAAI,CAACA,eAAe,GAAG,IAAI,CAAC3B,gBAAgB,CAACtD,YAAY,CAAC4B,SAAS,CAAE8B,KAAK,IAAK;QAC3E,IAAI,CAACsB,UAAU,CAAC,IAAI,EAAEtB,KAAK,CAAChE,YAAY,CAAC;MAC7C,CAAC,CAAC;IACN;IACA;IACA,IAAI,CAAC,IAAI,CAACwF,sBAAsB,EAAE;MAC9B,IAAI,CAACA,sBAAsB,GAAG,IAAI,CAAC5B,gBAAgB,CAACrD,mBAAmB,CAAC2B,SAAS,CAAE8B,KAAK,IAAK;QACzF,IAAI,CAACsB,UAAU,CAAC,IAAI,CAAC;MACzB,CAAC,CAAC;IACN;EACJ;EACA,IAAIG,SAAS,CAACvI,GAAG,EAAE;IACf,IAAIA,GAAG,EAAE;MACL,IAAI,CAACA,GAAG,GAAGA,GAAG;MACd,IAAI,CAACoI,UAAU,EAAE;IACrB;EACJ;EACA,IAAII,eAAe,CAACzI,MAAM,EAAE;IACxB,IAAI,CAACE,MAAM,CAAC,IAAI,CAACwI,aAAa,EAAE1I,MAAM,CAAC,EAAE;MACrC,IAAI,CAAC0I,aAAa,GAAG1I,MAAM;MAC3B,IAAI,CAACqI,UAAU,CAAC,IAAI,CAAC;IACzB;EACJ;EACAM,kBAAkB,GAAG;IACjB,IAAI,CAACN,UAAU,EAAE;EACrB;EACAA,UAAU,CAACO,WAAW,GAAG,KAAK,EAAE7F,YAAY,EAAE;IAC1C,IAAI8F,KAAK,GAAG,IAAI,CAACX,OAAO,CAACY,aAAa,CAACC,UAAU;IACjD;IACA,IAAI,CAACF,KAAK,CAACtI,MAAM,EAAE;MACf;MACA,IAAI,CAACyI,UAAU,CAAC,IAAI,CAACd,OAAO,CAACY,aAAa,EAAE,IAAI,CAAC7I,GAAG,CAAC;MACrD4I,KAAK,GAAG,IAAI,CAACX,OAAO,CAACY,aAAa,CAACC,UAAU;IACjD;IACA,KAAK,IAAIE,CAAC,GAAG,CAAC,EAAEA,CAAC,GAAGJ,KAAK,CAACtI,MAAM,EAAE,EAAE0I,CAAC,EAAE;MACnC,IAAIC,IAAI,GAAGL,KAAK,CAACI,CAAC,CAAC;MACnB,IAAIC,IAAI,CAACC,QAAQ,KAAK,CAAC,EAAE;QAAE;QACvB,IAAIlJ,GAAG;QACP,IAAI2I,WAAW,EAAE;UACbM,IAAI,CAACE,OAAO,GAAG,IAAI;QACvB;QACA,IAAIvI,SAAS,CAACqI,IAAI,CAACG,SAAS,CAAC,EAAE;UAC3BpJ,GAAG,GAAGiJ,IAAI,CAACG,SAAS;QACxB,CAAC,MACI,IAAI,IAAI,CAACpJ,GAAG,EAAE;UACfA,GAAG,GAAG,IAAI,CAACA,GAAG;QAClB,CAAC,MACI;UACD,IAAIqJ,OAAO,GAAG,IAAI,CAACC,UAAU,CAACL,IAAI,CAAC;UACnC,IAAIM,cAAc,GAAGF,OAAO,CAACG,IAAI,EAAE;UACnC,IAAID,cAAc,CAACjJ,MAAM,EAAE;YACvB2I,IAAI,CAACG,SAAS,GAAGG,cAAc;YAC/B;YACA,IAAIF,OAAO,KAAKJ,IAAI,CAACQ,YAAY,EAAE;cAC/BzJ,GAAG,GAAGuJ,cAAc;cACpB;cACAN,IAAI,CAACS,eAAe,GAAGL,OAAO,IAAIJ,IAAI,CAACS,eAAe;YAC1D,CAAC,MACI,IAAIT,IAAI,CAACS,eAAe,EAAE;cAAE;cAC7B;cACA1J,GAAG,GAAGiJ,IAAI,CAACS,eAAe,CAACF,IAAI,EAAE;YACrC,CAAC,MACI,IAAIH,OAAO,KAAKJ,IAAI,CAACQ,YAAY,EAAE;cACpC;cACAzJ,GAAG,GAAGuJ,cAAc;cACpB;cACAN,IAAI,CAACS,eAAe,GAAGL,OAAO,IAAIJ,IAAI,CAACS,eAAe;YAC1D;UACJ;QACJ;QACA,IAAI,CAACC,WAAW,CAAC3J,GAAG,EAAEiJ,IAAI,EAAEnG,YAAY,CAAC;MAC7C;IACJ;EACJ;EACA6G,WAAW,CAAC3J,GAAG,EAAEiJ,IAAI,EAAEnG,YAAY,EAAE;IACjC,IAAI9C,GAAG,EAAE;MACL,IAAIiJ,IAAI,CAACE,OAAO,KAAKnJ,GAAG,IAAI,IAAI,CAAC4J,UAAU,KAAK,IAAI,CAACnB,aAAa,EAAE;QAChE;MACJ;MACA,IAAI,CAACmB,UAAU,GAAG,IAAI,CAACnB,aAAa;MACpC,IAAIoB,aAAa,GAAI5E,GAAG,IAAK;QACzB,IAAIA,GAAG,KAAKjF,GAAG,EAAE;UACbiJ,IAAI,CAACE,OAAO,GAAGnJ,GAAG;QACtB;QACA,IAAI,CAACiJ,IAAI,CAACS,eAAe,EAAE;UACvBT,IAAI,CAACS,eAAe,GAAG,IAAI,CAACJ,UAAU,CAACL,IAAI,CAAC;QAChD;QACAA,IAAI,CAACQ,YAAY,GAAG7I,SAAS,CAACqE,GAAG,CAAC,GAAGA,GAAG,GAAIgE,IAAI,CAACS,eAAe,IAAI1J,GAAI;QACxE;QACA,IAAI,CAAC+I,UAAU,CAACE,IAAI,EAAE,IAAI,CAACjJ,GAAG,GAAGiJ,IAAI,CAACQ,YAAY,GAAGR,IAAI,CAACS,eAAe,CAACpH,OAAO,CAACtC,GAAG,EAAEiJ,IAAI,CAACQ,YAAY,CAAC,CAAC;QAC1G,IAAI,CAACvB,IAAI,CAAC4B,YAAY,EAAE;MAC5B,CAAC;MACD,IAAIlJ,SAAS,CAACkC,YAAY,CAAC,EAAE;QACzB,IAAImC,GAAG,GAAG,IAAI,CAACyB,gBAAgB,CAACR,eAAe,CAACpD,YAAY,EAAE9C,GAAG,EAAE,IAAI,CAACyI,aAAa,CAAC;QACtF,IAAI7J,YAAY,CAACqG,GAAG,CAAC,EAAE;UACnBA,GAAG,CAACD,SAAS,CAAC;YAAEO,IAAI,EAAEsE;UAAc,CAAC,CAAC;QAC1C,CAAC,MACI;UACDA,aAAa,CAAC5E,GAAG,CAAC;QACtB;MACJ,CAAC,MACI;QACD,IAAI,CAACyB,gBAAgB,CAACC,GAAG,CAAC3G,GAAG,EAAE,IAAI,CAACyI,aAAa,CAAC,CAACzD,SAAS,CAAC6E,aAAa,CAAC;MAC/E;IACJ;EACJ;EACAP,UAAU,CAACL,IAAI,EAAE;IACb,OAAOrI,SAAS,CAACqI,IAAI,CAACc,WAAW,CAAC,GAAGd,IAAI,CAACc,WAAW,GAAGd,IAAI,CAACe,IAAI;EACrE;EACAjB,UAAU,CAACE,IAAI,EAAEI,OAAO,EAAE;IACtB,IAAIzI,SAAS,CAACqI,IAAI,CAACc,WAAW,CAAC,EAAE;MAC7Bd,IAAI,CAACc,WAAW,GAAGV,OAAO;IAC9B,CAAC,MACI;MACDJ,IAAI,CAACe,IAAI,GAAGX,OAAO;IACvB;EACJ;EACAY,WAAW,GAAG;IACV,IAAI,IAAI,CAAC5B,eAAe,EAAE;MACtB,IAAI,CAACA,eAAe,CAAC6B,WAAW,EAAE;IACtC;IACA,IAAI,IAAI,CAAC5B,sBAAsB,EAAE;MAC7B,IAAI,CAACA,sBAAsB,CAAC4B,WAAW,EAAE;IAC7C;IACA,IAAI,IAAI,CAAC/B,sBAAsB,EAAE;MAC7B,IAAI,CAACA,sBAAsB,CAAC+B,WAAW,EAAE;IAC7C;EACJ;AACJ;AACAlC,kBAAkB,CAACvI,IAAI;EAAA,iBAAwFuI,kBAAkB,EA7yB3B9J,EAAE,mBA6yB2CwF,gBAAgB,GA7yB7DxF,EAAE,mBA6yBwEA,EAAE,CAACiM,UAAU,GA7yBvFjM,EAAE,mBA6yBkGA,EAAE,CAACkM,iBAAiB;AAAA,CAA4C;AAC1QpC,kBAAkB,CAACqC,IAAI,kBA9yB+EnM,EAAE;EAAA,MA8yBL8J,kBAAkB;EAAA;EAAA;IAAA;IAAA;EAAA;AAAA,EAAkI;AACvP;EAAA,mDA/yBsG9J,EAAE,mBA+yBb8J,kBAAkB,EAAc,CAAC;IAChHrI,IAAI,EAAEpB,SAAS;IACfwJ,IAAI,EAAE,CAAC;MACCuC,QAAQ,EAAE;IACd,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAE3K,IAAI,EAAE+D;IAAiB,CAAC,EAAE;MAAE/D,IAAI,EAAEzB,EAAE,CAACiM;IAAW,CAAC,EAAE;MAAExK,IAAI,EAAEzB,EAAE,CAACkM;IAAkB,CAAC,CAAC;EAAE,CAAC,EAAkB;IAAE7B,SAAS,EAAE,CAAC;MACzJ5I,IAAI,EAAEnB;IACV,CAAC,CAAC;IAAEgK,eAAe,EAAE,CAAC;MAClB7I,IAAI,EAAEnB;IACV,CAAC;EAAE,CAAC;AAAA;AAEhB,MAAM+L,aAAa,CAAC;EAChB9I,WAAW,CAAC8G,SAAS,EAAEL,IAAI,EAAE;IACzB,IAAI,CAACK,SAAS,GAAGA,SAAS;IAC1B,IAAI,CAACL,IAAI,GAAGA,IAAI;IAChB,IAAI,CAACrH,KAAK,GAAG,EAAE;IACf,IAAI,CAACsI,OAAO,GAAG,IAAI;IACnB,IAAI,CAACS,UAAU,GAAG,EAAE;EACxB;EACAD,WAAW,CAAC3J,GAAG,EAAEmG,iBAAiB,EAAErD,YAAY,EAAE;IAC9C,IAAI+G,aAAa,GAAI5E,GAAG,IAAK;MACzB,IAAI,CAACpE,KAAK,GAAGoE,GAAG,KAAK7C,SAAS,GAAG6C,GAAG,GAAGjF,GAAG;MAC1C,IAAI,CAACmJ,OAAO,GAAGnJ,GAAG;MAClB,IAAI,CAACkI,IAAI,CAAC4B,YAAY,EAAE;IAC5B,CAAC;IACD,IAAIhH,YAAY,EAAE;MACd,IAAImC,GAAG,GAAG,IAAI,CAACsD,SAAS,CAACrC,eAAe,CAACpD,YAAY,EAAE9C,GAAG,EAAEmG,iBAAiB,CAAC;MAC9E,IAAIvH,YAAY,CAACqG,GAAG,CAACD,SAAS,CAAC,EAAE;QAC7BC,GAAG,CAACD,SAAS,CAAC6E,aAAa,CAAC;MAChC,CAAC,MACI;QACDA,aAAa,CAAC5E,GAAG,CAAC;MACtB;IACJ;IACA,IAAI,CAACsD,SAAS,CAAC5B,GAAG,CAAC3G,GAAG,EAAEmG,iBAAiB,CAAC,CAACnB,SAAS,CAAC6E,aAAa,CAAC;EACvE;EACAW,SAAS,CAACC,KAAK,EAAE,GAAG1C,IAAI,EAAE;IACtB,IAAI,CAAC0C,KAAK,IAAI,CAACA,KAAK,CAACnK,MAAM,EAAE;MACzB,OAAOmK,KAAK;IAChB;IACA;IACA,IAAIxK,MAAM,CAACwK,KAAK,EAAE,IAAI,CAACtB,OAAO,CAAC,IAAIlJ,MAAM,CAAC8H,IAAI,EAAE,IAAI,CAAC6B,UAAU,CAAC,EAAE;MAC9D,OAAO,IAAI,CAAC/I,KAAK;IACrB;IACA,IAAIsF,iBAAiB,GAAG/D,SAAS;IACjC,IAAIxB,SAAS,CAACmH,IAAI,CAAC,CAAC,CAAC,CAAC,IAAIA,IAAI,CAACzH,MAAM,EAAE;MACnC,IAAI,OAAOyH,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAIA,IAAI,CAAC,CAAC,CAAC,CAACzH,MAAM,EAAE;QAC/C;QACA;QACA,IAAIoK,SAAS,GAAG3C,IAAI,CAAC,CAAC,CAAC,CAClBzF,OAAO,CAAC,kCAAkC,EAAE,OAAO,CAAC,CACpDA,OAAO,CAAC,sBAAsB,EAAE,OAAO,CAAC;QAC7C,IAAI;UACA6D,iBAAiB,GAAGwE,IAAI,CAACC,KAAK,CAACF,SAAS,CAAC;QAC7C,CAAC,CACD,OAAOG,CAAC,EAAE;UACN,MAAM,IAAIC,WAAW,CAAE,wEAAuE/C,IAAI,CAAC,CAAC,CAAE,EAAC,CAAC;QAC5G;MACJ,CAAC,MACI,IAAI,OAAOA,IAAI,CAAC,CAAC,CAAC,KAAK,QAAQ,IAAI,CAACvH,KAAK,CAACC,OAAO,CAACsH,IAAI,CAAC,CAAC,CAAC,CAAC,EAAE;QAC7D5B,iBAAiB,GAAG4B,IAAI,CAAC,CAAC,CAAC;MAC/B;IACJ;IACA;IACA,IAAI,CAACoB,OAAO,GAAGsB,KAAK;IACpB;IACA,IAAI,CAACb,UAAU,GAAG7B,IAAI;IACtB;IACA,IAAI,CAAC4B,WAAW,CAACc,KAAK,EAAEtE,iBAAiB,CAAC;IAC1C;IACA,IAAI,CAAC4E,QAAQ,EAAE;IACf;IACA,IAAI,CAAC,IAAI,CAAC5H,mBAAmB,EAAE;MAC3B,IAAI,CAACA,mBAAmB,GAAG,IAAI,CAACoF,SAAS,CAACpF,mBAAmB,CAAC6B,SAAS,CAAE8B,KAAK,IAAK;QAC/E,IAAI,IAAI,CAACqC,OAAO,IAAIrC,KAAK,CAACtH,IAAI,KAAK,IAAI,CAAC+I,SAAS,CAACvF,WAAW,EAAE;UAC3D,IAAI,CAACmG,OAAO,GAAG,IAAI;UACnB,IAAI,CAACQ,WAAW,CAACc,KAAK,EAAEtE,iBAAiB,EAAEW,KAAK,CAAChE,YAAY,CAAC;QAClE;MACJ,CAAC,CAAC;IACN;IACA;IACA,IAAI,CAAC,IAAI,CAACM,YAAY,EAAE;MACpB,IAAI,CAACA,YAAY,GAAG,IAAI,CAACmF,SAAS,CAACnF,YAAY,CAAC4B,SAAS,CAAE8B,KAAK,IAAK;QACjE,IAAI,IAAI,CAACqC,OAAO,EAAE;UACd,IAAI,CAACA,OAAO,GAAG,IAAI,CAAC,CAAC;UACrB,IAAI,CAACQ,WAAW,CAACc,KAAK,EAAEtE,iBAAiB,EAAEW,KAAK,CAAChE,YAAY,CAAC;QAClE;MACJ,CAAC,CAAC;IACN;IACA;IACA,IAAI,CAAC,IAAI,CAACO,mBAAmB,EAAE;MAC3B,IAAI,CAACA,mBAAmB,GAAG,IAAI,CAACkF,SAAS,CAAClF,mBAAmB,CAAC2B,SAAS,CAAC,MAAM;QAC1E,IAAI,IAAI,CAACmE,OAAO,EAAE;UACd,IAAI,CAACA,OAAO,GAAG,IAAI,CAAC,CAAC;UACrB,IAAI,CAACQ,WAAW,CAACc,KAAK,EAAEtE,iBAAiB,CAAC;QAC9C;MACJ,CAAC,CAAC;IACN;IACA,OAAO,IAAI,CAACtF,KAAK;EACrB;EACA;AACJ;AACA;EACIkK,QAAQ,GAAG;IACP,IAAI,OAAO,IAAI,CAAC5H,mBAAmB,KAAK,WAAW,EAAE;MACjD,IAAI,CAACA,mBAAmB,CAAC+G,WAAW,EAAE;MACtC,IAAI,CAAC/G,mBAAmB,GAAGf,SAAS;IACxC;IACA,IAAI,OAAO,IAAI,CAACgB,YAAY,KAAK,WAAW,EAAE;MAC1C,IAAI,CAACA,YAAY,CAAC8G,WAAW,EAAE;MAC/B,IAAI,CAAC9G,YAAY,GAAGhB,SAAS;IACjC;IACA,IAAI,OAAO,IAAI,CAACiB,mBAAmB,KAAK,WAAW,EAAE;MACjD,IAAI,CAACA,mBAAmB,CAAC6G,WAAW,EAAE;MACtC,IAAI,CAAC7G,mBAAmB,GAAGjB,SAAS;IACxC;EACJ;EACA6H,WAAW,GAAG;IACV,IAAI,CAACc,QAAQ,EAAE;EACnB;AACJ;AACAR,aAAa,CAAC9K,IAAI;EAAA,iBAAwF8K,aAAa,EAx6BjBrM,EAAE,mBAw6BiCwF,gBAAgB,OAx6BnDxF,EAAE,mBAw6B8DA,EAAE,CAACkM,iBAAiB;AAAA,CAAuC;AACjOG,aAAa,CAACS,KAAK,kBAz6BmF9M,EAAE;EAAA;EAAA,MAy6BAqM,aAAa;EAAA;AAAA,EAAmC;AACxJA,aAAa,CAAC7K,KAAK,kBA16BmFxB,EAAE;EAAA,OA06BMqM,aAAa;EAAA,SAAbA,aAAa;AAAA,EAAG;AAC9H;EAAA,mDA36BsGrM,EAAE,mBA26BbqM,aAAa,EAAc,CAAC;IAC3G5K,IAAI,EAAExB;EACV,CAAC,EAAE;IACCwB,IAAI,EAAElB,IAAI;IACVsJ,IAAI,EAAE,CAAC;MACCkD,IAAI,EAAE,WAAW;MACjBC,IAAI,EAAE,KAAK,CAAC;IAChB,CAAC;EACT,CAAC,CAAC,EAAkB,YAAY;IAAE,OAAO,CAAC;MAAEvL,IAAI,EAAE+D;IAAiB,CAAC,EAAE;MAAE/D,IAAI,EAAEzB,EAAE,CAACkM;IAAkB,CAAC,CAAC;EAAE,CAAC;AAAA;AAEhH,MAAMe,eAAe,CAAC;EAClB;AACJ;AACA;EACI,OAAOC,OAAO,CAACC,MAAM,GAAG,CAAC,CAAC,EAAE;IACxB,OAAO;MACHC,QAAQ,EAAEH,eAAe;MACzBI,SAAS,EAAE,CACPF,MAAM,CAACG,MAAM,IAAI;QAAEC,OAAO,EAAEpM,eAAe;QAAEqM,QAAQ,EAAEpM;MAAoB,CAAC,EAC5E+L,MAAM,CAACxH,QAAQ,IAAI;QAAE4H,OAAO,EAAE/I,iBAAiB;QAAEgJ,QAAQ,EAAE/I;MAAsB,CAAC,EAClF0I,MAAM,CAACvH,MAAM,IAAI;QAAE2H,OAAO,EAAElK,eAAe;QAAEmK,QAAQ,EAAElK;MAAuB,CAAC,EAC/E6J,MAAM,CAACtH,yBAAyB,IAAI;QAAE0H,OAAO,EAAE7L,yBAAyB;QAAE8L,QAAQ,EAAE7L;MAA8B,CAAC,EACnHkD,cAAc,EACd;QAAE0I,OAAO,EAAEnI,SAAS;QAAEqI,QAAQ,EAAEN,MAAM,CAACpH;MAAQ,CAAC,EAChD;QAAEwH,OAAO,EAAElI,gBAAgB;QAAEoI,QAAQ,EAAEN,MAAM,CAACrH;MAAe,CAAC,EAC9D;QAAEyH,OAAO,EAAEhI,UAAU;QAAEkI,QAAQ,EAAEN,MAAM,CAACnH;MAAO,CAAC,EAChD;QAAEuH,OAAO,EAAEjI,gBAAgB;QAAEmI,QAAQ,EAAEN,MAAM,CAAClH;MAAgB,CAAC,EAC/DT,gBAAgB;IAExB,CAAC;EACL;EACA;AACJ;AACA;EACI,OAAOkI,QAAQ,CAACP,MAAM,GAAG,CAAC,CAAC,EAAE;IACzB,OAAO;MACHC,QAAQ,EAAEH,eAAe;MACzBI,SAAS,EAAE,CACPF,MAAM,CAACG,MAAM,IAAI;QAAEC,OAAO,EAAEpM,eAAe;QAAEqM,QAAQ,EAAEpM;MAAoB,CAAC,EAC5E+L,MAAM,CAACxH,QAAQ,IAAI;QAAE4H,OAAO,EAAE/I,iBAAiB;QAAEgJ,QAAQ,EAAE/I;MAAsB,CAAC,EAClF0I,MAAM,CAACvH,MAAM,IAAI;QAAE2H,OAAO,EAAElK,eAAe;QAAEmK,QAAQ,EAAElK;MAAuB,CAAC,EAC/E6J,MAAM,CAACtH,yBAAyB,IAAI;QAAE0H,OAAO,EAAE7L,yBAAyB;QAAE8L,QAAQ,EAAE7L;MAA8B,CAAC,EACnH;QAAE4L,OAAO,EAAEnI,SAAS;QAAEqI,QAAQ,EAAEN,MAAM,CAACpH;MAAQ,CAAC,EAChD;QAAEwH,OAAO,EAAElI,gBAAgB;QAAEoI,QAAQ,EAAEN,MAAM,CAACrH;MAAe,CAAC,EAC9D;QAAEyH,OAAO,EAAEhI,UAAU;QAAEkI,QAAQ,EAAEN,MAAM,CAACnH;MAAO,CAAC,EAChD;QAAEuH,OAAO,EAAEjI,gBAAgB;QAAEmI,QAAQ,EAAEN,MAAM,CAAClH;MAAgB,CAAC,EAC/DT,gBAAgB;IAExB,CAAC;EACL;AACJ;AACAyH,eAAe,CAAC1L,IAAI;EAAA,iBAAwF0L,eAAe;AAAA,CAAkD;AAC7KA,eAAe,CAACU,IAAI,kBA/9BkF3N,EAAE;EAAA,MA+9BKiN;AAAe,EAE9F;AAC9BA,eAAe,CAACW,IAAI,kBAl+BkF5N,EAAE,qBAk+BuB;AAC/H;EAAA,mDAn+BsGA,EAAE,mBAm+BbiN,eAAe,EAAc,CAAC;IAC7GxL,IAAI,EAAEjB,QAAQ;IACdqJ,IAAI,EAAE,CAAC;MACCgE,YAAY,EAAE,CACVxB,aAAa,EACbvC,kBAAkB,CACrB;MACDgE,OAAO,EAAE,CACLzB,aAAa,EACbvC,kBAAkB;IAE1B,CAAC;EACT,CAAC,CAAC;AAAA;;AAEV;AACA;AACA;;AAEA,SAASxE,gBAAgB,EAAE3D,6BAA6B,EAAED,yBAAyB,EAAE8C,iBAAiB,EAAElB,sBAAsB,EAAEwG,kBAAkB,EAAErF,qBAAqB,EAAErD,mBAAmB,EAAED,eAAe,EAAE8L,eAAe,EAAE5J,eAAe,EAAEgJ,aAAa,EAAE7G,gBAAgB,EAAEX,cAAc,EAAEQ,gBAAgB,EAAEE,UAAU,EAAEH,SAAS"},"metadata":{},"sourceType":"module","externalDependencies":[]}